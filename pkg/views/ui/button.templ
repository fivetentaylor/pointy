package ui

type ButtonOptions struct {
	Variant string
	Size    string
	Class   string
	Href    string
	Attrs   templ.Attributes
}

templ Button(opts ButtonOptions) {
	if opts.Href != "" {
		<a class={ buttonClass(opts) } { opts.Attrs... } href={ templ.SafeURL(opts.Href) }>
			{ children... }
		</a>
	} else {
		<button class={ buttonClass(opts) } { opts.Attrs... }>
			{ children... }
		</button>
	}
}

var buttonVariants = map[string]string{
	"default":     " bg-zinc-900 text-primary-foreground hover:bg-zinc-900/90",
	"reviso":      " bg-primary hover:bg-primary/90 text-primary-foreground hover:bg-primary/90",
	"icon":        " bg-background text-primary-foreground hover:bg-background/90 border border-border",
	"destructive": " bg-destructive text-destructive-foreground hover:bg-destructive/90",
	"outline":     " border border-input bg-background hover:bg-accent hover:text-accent-foreground",
	"secondary":   " bg-secondary text-secondary-foreground hover:bg-secondary/80 shadow-sm",
	"ghost":       " hover:bg-accent hover:text-accent-foreground",
	"link":        " text-primary underline-offset-4 hover:underline",
	"highlight":   " bg-highlight text-highlight-foreground hover:bg-highlight/90",
}

var sizes = map[string]string{
	"default": " h-10 px-4 py-2",
	"sm":      " h-9 rounded-md px-3",
	"lg":      " h-11 rounded-md px-8",
	"icon":    " h-10 w-10",
}

func buttonClass(opts ButtonOptions) string {
	var class string
	class = "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"

	variant, ok := buttonVariants[opts.Variant]
	if ok {
		class += variant
	} else {
		class += buttonVariants["default"]
	}
	size, ok := sizes[opts.Size]
	if ok {
		class += size
	} else {
		class += sizes["default"]
	}
	if opts.Class != "" {
		class = opts.Class + " " + class
	}

	return class
}
