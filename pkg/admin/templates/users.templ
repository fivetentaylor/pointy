package templates

import (
	"fmt"
	"time"
	"github.com/fivetentaylor/pointy/pkg/service/users"
)

type AdminUser struct {
	ID               string
	Name             string
	Email            string
	DisplayName      string
	Provider         string
	Admin            bool
	Educator         bool
	StripeCustomerID string
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

type PaginationInfo struct {
	CurrentPage   int
	TotalPages    int
	TotalItems    int
	ItemsPerPage  int
	HasPrevious   bool
	HasNext       bool
	PreviousPage  int
	NextPage      int
}

templ Users(users []AdminUser, pagination PaginationInfo, searchEmail string) {
	@AdminLayout("users") {
		<div class="space-y-4">
			<!-- Search Form -->
			<div class="bg-white shadow rounded-lg p-4">
				<form method="GET" class="flex items-center space-x-4">
					<div class="flex-1">
						<label for="search" class="block text-sm font-medium text-gray-700">Search by Email</label>
						<input
							type="text"
							id="search"
							name="search"
							value={ searchEmail }
							placeholder="Enter email to search..."
							class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm text-gray-900 bg-white"
						/>
					</div>
					<div class="pt-6">
						<button
							type="submit"
							class="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
						>
							Search
						</button>
					</div>
					if searchEmail != "" {
						<div class="pt-6">
							<a
								href="/admin/users"
								class="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
							>
								Clear
							</a>
						</div>
					}
				</form>
			</div>
			
			<!-- Users Table -->
			<div class="bg-white shadow rounded-lg overflow-hidden">
				<div class="px-4 py-5 sm:p-6">
					<div class="flex items-center justify-between mb-4">
						<h3 class="text-lg font-medium text-gray-900">
							Users ({ fmt.Sprintf("%d", pagination.TotalItems) } total)
						</h3>
					</div>
					
					<div class="overflow-x-auto">
						<table class="min-w-full divide-y divide-gray-200">
							<thead class="bg-gray-50">
								<tr>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										User
									</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Details
									</th>
									<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
										Dates
									</th>
									<th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
										Actions
									</th>
								</tr>
							</thead>
							<tbody class="bg-white divide-y divide-gray-200" id="users-table-body">
								for _, user := range users {
									@userRow(user)
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
			
			<!-- Pagination -->
			if pagination.TotalPages > 1 {
				@paginationControls(pagination, searchEmail)
			}
		</div>
		
		<!-- Delete Confirmation Modal -->
		<div id="delete-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
			<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
				<div class="mt-3 text-center">
					<div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
						<svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
						</svg>
					</div>
					<h3 class="text-lg font-medium text-gray-900 mt-2">Delete User</h3>
					<div class="mt-2 px-7 py-3">
						<p class="text-sm text-gray-500" id="delete-modal-message">
							Are you sure you want to delete this user? This will permanently remove all their data including documents, comments, and files. This action cannot be undone.
						</p>
					</div>
					<div class="items-center px-4 py-3 space-x-2 flex justify-center">
						<button
							id="cancel-delete"
							class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md shadow-sm hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-300"
						>
							Cancel
						</button>
						<button
							id="confirm-delete"
							class="px-4 py-2 bg-red-600 text-white text-base font-medium rounded-md shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-300"
						>
							Delete User
						</button>
					</div>
				</div>
			</div>
		</div>
		
		<!-- Success/Error Messages -->
		<div id="message-container" class="fixed top-4 right-4 z-50"></div>
		
		<script>
		document.addEventListener('DOMContentLoaded', function() {
			const deleteModal = document.getElementById('delete-modal');
			const cancelBtn = document.getElementById('cancel-delete');
			const confirmBtn = document.getElementById('confirm-delete');
			const messageContainer = document.getElementById('message-container');
			let currentUserToDelete = null;
			
			// Handle delete button clicks using event delegation
			document.addEventListener('click', function(e) {
				if (e.target.classList.contains('delete-user-btn')) {
					const userId = e.target.getAttribute('data-user-id');
					const userEmail = e.target.getAttribute('data-user-email');
					showDeleteModal(userId, userEmail);
				}
			});
			
			// Show delete modal
			function showDeleteModal(userId, userEmail) {
				currentUserToDelete = userId;
				document.getElementById('delete-modal-message').innerHTML = 
					`Are you sure you want to delete user <strong>${userEmail}</strong>? This will permanently remove all their data including documents, comments, and files. This action cannot be undone.`;
				deleteModal.classList.remove('hidden');
			}
			
			// Hide delete modal
			function hideDeleteModal() {
				deleteModal.classList.add('hidden');
				currentUserToDelete = null;
			}
			
			cancelBtn.addEventListener('click', hideDeleteModal);
			
			// Click outside to close
			deleteModal.addEventListener('click', function(e) {
				if (e.target === deleteModal) {
					hideDeleteModal();
				}
			});
			
			// Confirm delete
			confirmBtn.addEventListener('click', function() {
				if (!currentUserToDelete) return;
				
				confirmBtn.disabled = true;
				confirmBtn.textContent = 'Deleting...';
				
				// Make delete request
				fetch(`/admin/users/${currentUserToDelete}`, {
					method: 'DELETE',
					headers: {
						'X-Requested-With': 'XMLHttpRequest'
					}
				})
				.then(response => response.text())
				.then(html => {
					// Insert the response HTML into message container
					messageContainer.innerHTML = html;
					
					// If successful, remove the user row
					const userRow = document.querySelector(`tr[data-user-id="${currentUserToDelete}"]`);
					if (userRow) {
						userRow.remove();
					}
					
					hideDeleteModal();
				})
				.catch(error => {
					console.error('Delete failed:', error);
					showMessage('Failed to delete user. Please try again.', 'error');
				})
				.finally(() => {
					confirmBtn.disabled = false;
					confirmBtn.textContent = 'Delete User';
				});
			});
			
			function showMessage(message, type = 'success') {
				const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
				const messageEl = document.createElement('div');
				messageEl.className = `${bgColor} text-white px-6 py-4 rounded-md shadow-lg mb-4`;
				messageEl.textContent = message;
				
				messageContainer.appendChild(messageEl);
				
				setTimeout(() => {
					messageEl.remove();
				}, 5000);
			}
		});
		</script>
	}
}

templ userRow(user AdminUser) {
	<tr class="hover:bg-gray-50" data-user-id={ user.ID }>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="flex items-center">
				<div class="ml-4">
					<div class="text-sm font-medium text-gray-900">
						{ user.DisplayName }
					</div>
					<div class="text-sm text-gray-500">
						{ user.Email }
					</div>
					<div class="text-xs text-gray-400 mt-1">
						ID: { user.ID[:8] }...
					</div>
				</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-900">
				<div>Provider: { user.Provider }</div>
				if user.StripeCustomerID != "" {
					<div>Stripe: { user.StripeCustomerID[:18] }...</div>
				}
				<div class="flex space-x-2 mt-1">
					if user.Admin {
						<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
							Admin
						</span>
					}
					if user.Educator {
						<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
							Educator
						</span>
					}
				</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
			<div>Created: { user.CreatedAt.Format("2006-01-02 15:04") }</div>
			<div>Updated: { user.UpdatedAt.Format("2006-01-02 15:04") }</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
			<button
				data-user-id={ user.ID }
				data-user-email={ user.Email }
				class="delete-user-btn inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
			>
				Delete
			</button>
		</td>
	</tr>
}

templ paginationControls(pagination PaginationInfo, searchEmail string) {
	<div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6 rounded-lg shadow">
		<div class="flex-1 flex justify-between sm:hidden">
			if pagination.HasPrevious {
				<a
					href={ templ.SafeURL(fmt.Sprintf("/admin/users?page=%d&search=%s", pagination.PreviousPage, searchEmail)) }
					class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
				>
					Previous
				</a>
			}
			if pagination.HasNext {
				<a
					href={ templ.SafeURL(fmt.Sprintf("/admin/users?page=%d&search=%s", pagination.NextPage, searchEmail)) }
					class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
				>
					Next
				</a>
			}
		</div>
		<div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
			<div>
				<p class="text-sm text-gray-700">
					Showing
					<span class="font-medium">{ fmt.Sprintf("%d", (pagination.CurrentPage-1)*pagination.ItemsPerPage+1) }</span>
					to
					<span class="font-medium">
						{ fmt.Sprintf("%d", minInt(pagination.CurrentPage*pagination.ItemsPerPage, pagination.TotalItems)) }
					</span>
					of
					<span class="font-medium">{ fmt.Sprintf("%d", pagination.TotalItems) }</span>
					results
				</p>
			</div>
			<div>
				<nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
					if pagination.HasPrevious {
						<a
							href={ templ.SafeURL(fmt.Sprintf("/admin/users?page=%d&search=%s", pagination.PreviousPage, searchEmail)) }
							class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
						>
							<span class="sr-only">Previous</span>
							<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd"></path>
							</svg>
						</a>
					}
					
					for i := maxInt(1, pagination.CurrentPage-2); i <= minInt(pagination.TotalPages, pagination.CurrentPage+2); i++ {
						if i == pagination.CurrentPage {
							<span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-indigo-50 text-sm font-medium text-indigo-600">
								{ fmt.Sprintf("%d", i) }
							</span>
						} else {
							<a
								href={ templ.SafeURL(fmt.Sprintf("/admin/users?page=%d&search=%s", i, searchEmail)) }
								class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50"
							>
								{ fmt.Sprintf("%d", i) }
							</a>
						}
					}
					
					if pagination.HasNext {
						<a
							href={ templ.SafeURL(fmt.Sprintf("/admin/users?page=%d&search=%s", pagination.NextPage, searchEmail)) }
							class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
						>
							<span class="sr-only">Next</span>
							<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
								<path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
							</svg>
						</a>
					}
				</nav>
			</div>
		</div>
	</div>
}

templ DeleteUserSuccess(userID string, result *users.UserDeletionResult) {
	<div class="bg-green-500 text-white px-6 py-4 rounded-md shadow-lg mb-4">
		<div class="flex items-center">
			<svg class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
			</svg>
			<div>
				<p class="font-medium">User deleted successfully!</p>
				<p class="text-sm opacity-90">
					Removed { fmt.Sprintf("%d", result.DeletedPostgresqlRecords) } database records, 
					{ fmt.Sprintf("%d", result.DeletedDynamoDBRecords) } DynamoDB records, 
					and { fmt.Sprintf("%d", result.DeletedS3Objects) } S3 objects.
				</p>
			</div>
		</div>
	</div>
}

templ DeleteUserError(userID string, errorMessage string) {
	<div class="bg-red-500 text-white px-6 py-4 rounded-md shadow-lg mb-4">
		<div class="flex items-center">
			<svg class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
			</svg>
			<div>
				<p class="font-medium">Failed to delete user</p>
				<p class="text-sm opacity-90">Error: { errorMessage }</p>
			</div>
		</div>
	</div>
}

func minInt(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func maxInt(a, b int) int {
	if a > b {
		return a
	}
	return b
}