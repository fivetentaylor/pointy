package templates

import (
	"encoding/base64"
	"fmt"
	"time"
	"strings"
)

type LogFile struct {
	ID                string
	DocID             string
	ParentContainerID string
	ContainerID       string
	MessageID         string
	Timestamp         time.Time
	FileName          string
}

func (l LogFile) Base64Key() string {
	return base64.StdEncoding.EncodeToString([]byte(l.ID))
}

func LogFileFromKey(key string) (LogFile, error) {
	parts := strings.Split(key, "/")
	if len(parts) != 7 {
		return LogFile{}, fmt.Errorf("invalid key: %s", key)
	}

	msgIDparts := strings.Split(parts[5], "_")
	if len(msgIDparts) != 2 {
		return LogFile{}, fmt.Errorf("invalid msg id key: %s", parts[5])
	}

	timestamp, err := time.Parse(time.RFC3339, msgIDparts[1])
	if err != nil {
		return LogFile{}, fmt.Errorf("invalid timestamp: %s %s", msgIDparts[1], err)
	}

	return LogFile{
		ID:                key,
		DocID:             parts[1],
		ParentContainerID: parts[3],
		ContainerID:       parts[4],
		MessageID:         msgIDparts[0],
		Timestamp:         timestamp,
		FileName:          parts[6],
	}, nil
}

templ AI(id string, files []LogFile) {
	@DocLayout(id, "ai") {
		<div class="mx-auto p-4">
			<div class="grid grid-cols-4 gap-4">
				<div class="bg-white text-black p-4">
					<h2 class="text-lg font-bold border-b mb-4">Text</h2>
					<div class="font-mono">
						for i, f := range files {
							if i == 0 || files[i-1].ParentContainerID != f.ParentContainerID {
								<h1 class="text-xl font-bold border-b mb-4">{ f.ParentContainerID }</h1>
							}
							if i == 0 || files[i-1].ContainerID != f.ContainerID {
								<h2 class="px-4 text-lg font-bold border-b mb-4">{ f.ContainerID }</h2>
							}
							if i == 0 || files[i-1].MessageID != f.MessageID {
								<h2 class="px-8 text-md font-bold border-b mb-4">{ f.MessageID }</h2>
							}
							<div class="px-12 text-sm mb-4">
								<a href="#" hx-get={ fmt.Sprintf("/admin/documents/%s/ai/%s", id, f.Base64Key()) } hx-target="#code-block">
									<span class="text-gray-500">
										{ f.Timestamp.Format(time.RFC1123) } -
									</span>
									{ f.FileName }
								</a>
							</div>
						}
					</div>
				</div>
				<div class="bg-white text-black p-4 overflow-auto col-span-3">
					<pre class="whitespace-pre-wrap font-mono">
						<code id="code-block" class="language-json"></code>
					</pre>
				</div>
			</div>
		</div>
	}
}
