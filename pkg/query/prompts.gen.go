// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/teamreviso/code/pkg/models"
)

func newPrompt(db *gorm.DB, opts ...gen.DOOption) prompt {
	_prompt := prompt{}

	_prompt.promptDo.UseDB(db, opts...)
	_prompt.promptDo.UseModel(&models.Prompt{})

	tableName := _prompt.promptDo.TableName()
	_prompt.ALL = field.NewAsterisk(tableName)
	_prompt.ID = field.NewInt32(tableName, "id")
	_prompt.PromptName = field.NewString(tableName, "prompt_name")
	_prompt.SystemContent = field.NewString(tableName, "system_content")
	_prompt.Version = field.NewString(tableName, "version")
	_prompt.Provider = field.NewString(tableName, "provider")
	_prompt.ModelName = field.NewString(tableName, "model_name")
	_prompt.Temperature = field.NewFloat64(tableName, "temperature")
	_prompt.MaxTokens = field.NewInt32(tableName, "max_tokens")
	_prompt.TopP = field.NewFloat64(tableName, "top_p")
	_prompt.CreatedAt = field.NewTime(tableName, "created_at")
	_prompt.UpdatedAt = field.NewTime(tableName, "updated_at")
	_prompt.ContentJSON = field.NewString(tableName, "content_json")

	_prompt.fillFieldMap()

	return _prompt
}

type prompt struct {
	promptDo

	ALL           field.Asterisk
	ID            field.Int32
	PromptName    field.String
	SystemContent field.String
	Version       field.String
	Provider      field.String
	ModelName     field.String
	Temperature   field.Float64
	MaxTokens     field.Int32
	TopP          field.Float64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	ContentJSON   field.String

	fieldMap map[string]field.Expr
}

func (p prompt) Table(newTableName string) *prompt {
	p.promptDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p prompt) As(alias string) *prompt {
	p.promptDo.DO = *(p.promptDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *prompt) updateTableName(table string) *prompt {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.PromptName = field.NewString(table, "prompt_name")
	p.SystemContent = field.NewString(table, "system_content")
	p.Version = field.NewString(table, "version")
	p.Provider = field.NewString(table, "provider")
	p.ModelName = field.NewString(table, "model_name")
	p.Temperature = field.NewFloat64(table, "temperature")
	p.MaxTokens = field.NewInt32(table, "max_tokens")
	p.TopP = field.NewFloat64(table, "top_p")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.ContentJSON = field.NewString(table, "content_json")

	p.fillFieldMap()

	return p
}

func (p *prompt) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *prompt) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 12)
	p.fieldMap["id"] = p.ID
	p.fieldMap["prompt_name"] = p.PromptName
	p.fieldMap["system_content"] = p.SystemContent
	p.fieldMap["version"] = p.Version
	p.fieldMap["provider"] = p.Provider
	p.fieldMap["model_name"] = p.ModelName
	p.fieldMap["temperature"] = p.Temperature
	p.fieldMap["max_tokens"] = p.MaxTokens
	p.fieldMap["top_p"] = p.TopP
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["content_json"] = p.ContentJSON
}

func (p prompt) clone(db *gorm.DB) prompt {
	p.promptDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p prompt) replaceDB(db *gorm.DB) prompt {
	p.promptDo.ReplaceDB(db)
	return p
}

type promptDo struct{ gen.DO }

type IPromptDo interface {
	gen.SubQuery
	Debug() IPromptDo
	WithContext(ctx context.Context) IPromptDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromptDo
	WriteDB() IPromptDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromptDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromptDo
	Not(conds ...gen.Condition) IPromptDo
	Or(conds ...gen.Condition) IPromptDo
	Select(conds ...field.Expr) IPromptDo
	Where(conds ...gen.Condition) IPromptDo
	Order(conds ...field.Expr) IPromptDo
	Distinct(cols ...field.Expr) IPromptDo
	Omit(cols ...field.Expr) IPromptDo
	Join(table schema.Tabler, on ...field.Expr) IPromptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromptDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromptDo
	Group(cols ...field.Expr) IPromptDo
	Having(conds ...gen.Condition) IPromptDo
	Limit(limit int) IPromptDo
	Offset(offset int) IPromptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromptDo
	Unscoped() IPromptDo
	Create(values ...*models.Prompt) error
	CreateInBatches(values []*models.Prompt, batchSize int) error
	Save(values ...*models.Prompt) error
	First() (*models.Prompt, error)
	Take() (*models.Prompt, error)
	Last() (*models.Prompt, error)
	Find() ([]*models.Prompt, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Prompt, err error)
	FindInBatches(result *[]*models.Prompt, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Prompt) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromptDo
	Assign(attrs ...field.AssignExpr) IPromptDo
	Joins(fields ...field.RelationField) IPromptDo
	Preload(fields ...field.RelationField) IPromptDo
	FirstOrInit() (*models.Prompt, error)
	FirstOrCreate() (*models.Prompt, error)
	FindByPage(offset int, limit int) (result []*models.Prompt, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promptDo) Debug() IPromptDo {
	return p.withDO(p.DO.Debug())
}

func (p promptDo) WithContext(ctx context.Context) IPromptDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptDo) ReadDB() IPromptDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptDo) WriteDB() IPromptDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptDo) Session(config *gorm.Session) IPromptDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptDo) Clauses(conds ...clause.Expression) IPromptDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptDo) Returning(value interface{}, columns ...string) IPromptDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptDo) Not(conds ...gen.Condition) IPromptDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptDo) Or(conds ...gen.Condition) IPromptDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptDo) Select(conds ...field.Expr) IPromptDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptDo) Where(conds ...gen.Condition) IPromptDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptDo) Order(conds ...field.Expr) IPromptDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptDo) Distinct(cols ...field.Expr) IPromptDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptDo) Omit(cols ...field.Expr) IPromptDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptDo) Join(table schema.Tabler, on ...field.Expr) IPromptDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromptDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromptDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptDo) Group(cols ...field.Expr) IPromptDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptDo) Having(conds ...gen.Condition) IPromptDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptDo) Limit(limit int) IPromptDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptDo) Offset(offset int) IPromptDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromptDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptDo) Unscoped() IPromptDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptDo) Create(values ...*models.Prompt) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptDo) CreateInBatches(values []*models.Prompt, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptDo) Save(values ...*models.Prompt) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptDo) First() (*models.Prompt, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Prompt), nil
	}
}

func (p promptDo) Take() (*models.Prompt, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Prompt), nil
	}
}

func (p promptDo) Last() (*models.Prompt, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Prompt), nil
	}
}

func (p promptDo) Find() ([]*models.Prompt, error) {
	result, err := p.DO.Find()
	return result.([]*models.Prompt), err
}

func (p promptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Prompt, err error) {
	buf := make([]*models.Prompt, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptDo) FindInBatches(result *[]*models.Prompt, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptDo) Attrs(attrs ...field.AssignExpr) IPromptDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptDo) Assign(attrs ...field.AssignExpr) IPromptDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptDo) Joins(fields ...field.RelationField) IPromptDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptDo) Preload(fields ...field.RelationField) IPromptDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptDo) FirstOrInit() (*models.Prompt, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Prompt), nil
	}
}

func (p promptDo) FirstOrCreate() (*models.Prompt, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Prompt), nil
	}
}

func (p promptDo) FindByPage(offset int, limit int) (result []*models.Prompt, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptDo) Delete(models ...*models.Prompt) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptDo) withDO(do gen.Dao) *promptDo {
	p.DO = *do.(*gen.DO)
	return p
}
