// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/teamreviso/code/pkg/models"
)

func newPaymentHistory(db *gorm.DB, opts ...gen.DOOption) paymentHistory {
	_paymentHistory := paymentHistory{}

	_paymentHistory.paymentHistoryDo.UseDB(db, opts...)
	_paymentHistory.paymentHistoryDo.UseModel(&models.PaymentHistory{})

	tableName := _paymentHistory.paymentHistoryDo.TableName()
	_paymentHistory.ALL = field.NewAsterisk(tableName)
	_paymentHistory.ID = field.NewString(tableName, "id")
	_paymentHistory.UserID = field.NewString(tableName, "user_id")
	_paymentHistory.StripePaymentIntentID = field.NewString(tableName, "stripe_payment_intent_id")
	_paymentHistory.AmountCents = field.NewInt32(tableName, "amount_cents")
	_paymentHistory.Currency = field.NewString(tableName, "currency")
	_paymentHistory.Status = field.NewString(tableName, "status")
	_paymentHistory.CreatedAt = field.NewTime(tableName, "created_at")

	_paymentHistory.fillFieldMap()

	return _paymentHistory
}

type paymentHistory struct {
	paymentHistoryDo

	ALL                   field.Asterisk
	ID                    field.String
	UserID                field.String
	StripePaymentIntentID field.String
	AmountCents           field.Int32
	Currency              field.String
	Status                field.String
	CreatedAt             field.Time

	fieldMap map[string]field.Expr
}

func (p paymentHistory) Table(newTableName string) *paymentHistory {
	p.paymentHistoryDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentHistory) As(alias string) *paymentHistory {
	p.paymentHistoryDo.DO = *(p.paymentHistoryDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentHistory) updateTableName(table string) *paymentHistory {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.UserID = field.NewString(table, "user_id")
	p.StripePaymentIntentID = field.NewString(table, "stripe_payment_intent_id")
	p.AmountCents = field.NewInt32(table, "amount_cents")
	p.Currency = field.NewString(table, "currency")
	p.Status = field.NewString(table, "status")
	p.CreatedAt = field.NewTime(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *paymentHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentHistory) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["stripe_payment_intent_id"] = p.StripePaymentIntentID
	p.fieldMap["amount_cents"] = p.AmountCents
	p.fieldMap["currency"] = p.Currency
	p.fieldMap["status"] = p.Status
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p paymentHistory) clone(db *gorm.DB) paymentHistory {
	p.paymentHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentHistory) replaceDB(db *gorm.DB) paymentHistory {
	p.paymentHistoryDo.ReplaceDB(db)
	return p
}

type paymentHistoryDo struct{ gen.DO }

type IPaymentHistoryDo interface {
	gen.SubQuery
	Debug() IPaymentHistoryDo
	WithContext(ctx context.Context) IPaymentHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPaymentHistoryDo
	WriteDB() IPaymentHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPaymentHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPaymentHistoryDo
	Not(conds ...gen.Condition) IPaymentHistoryDo
	Or(conds ...gen.Condition) IPaymentHistoryDo
	Select(conds ...field.Expr) IPaymentHistoryDo
	Where(conds ...gen.Condition) IPaymentHistoryDo
	Order(conds ...field.Expr) IPaymentHistoryDo
	Distinct(cols ...field.Expr) IPaymentHistoryDo
	Omit(cols ...field.Expr) IPaymentHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IPaymentHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPaymentHistoryDo
	Group(cols ...field.Expr) IPaymentHistoryDo
	Having(conds ...gen.Condition) IPaymentHistoryDo
	Limit(limit int) IPaymentHistoryDo
	Offset(offset int) IPaymentHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentHistoryDo
	Unscoped() IPaymentHistoryDo
	Create(values ...*models.PaymentHistory) error
	CreateInBatches(values []*models.PaymentHistory, batchSize int) error
	Save(values ...*models.PaymentHistory) error
	First() (*models.PaymentHistory, error)
	Take() (*models.PaymentHistory, error)
	Last() (*models.PaymentHistory, error)
	Find() ([]*models.PaymentHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PaymentHistory, err error)
	FindInBatches(result *[]*models.PaymentHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.PaymentHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPaymentHistoryDo
	Assign(attrs ...field.AssignExpr) IPaymentHistoryDo
	Joins(fields ...field.RelationField) IPaymentHistoryDo
	Preload(fields ...field.RelationField) IPaymentHistoryDo
	FirstOrInit() (*models.PaymentHistory, error)
	FirstOrCreate() (*models.PaymentHistory, error)
	FindByPage(offset int, limit int) (result []*models.PaymentHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPaymentHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p paymentHistoryDo) Debug() IPaymentHistoryDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentHistoryDo) WithContext(ctx context.Context) IPaymentHistoryDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentHistoryDo) ReadDB() IPaymentHistoryDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentHistoryDo) WriteDB() IPaymentHistoryDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentHistoryDo) Session(config *gorm.Session) IPaymentHistoryDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentHistoryDo) Clauses(conds ...clause.Expression) IPaymentHistoryDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentHistoryDo) Returning(value interface{}, columns ...string) IPaymentHistoryDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentHistoryDo) Not(conds ...gen.Condition) IPaymentHistoryDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentHistoryDo) Or(conds ...gen.Condition) IPaymentHistoryDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentHistoryDo) Select(conds ...field.Expr) IPaymentHistoryDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentHistoryDo) Where(conds ...gen.Condition) IPaymentHistoryDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentHistoryDo) Order(conds ...field.Expr) IPaymentHistoryDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentHistoryDo) Distinct(cols ...field.Expr) IPaymentHistoryDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentHistoryDo) Omit(cols ...field.Expr) IPaymentHistoryDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentHistoryDo) Join(table schema.Tabler, on ...field.Expr) IPaymentHistoryDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPaymentHistoryDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IPaymentHistoryDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentHistoryDo) Group(cols ...field.Expr) IPaymentHistoryDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentHistoryDo) Having(conds ...gen.Condition) IPaymentHistoryDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentHistoryDo) Limit(limit int) IPaymentHistoryDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentHistoryDo) Offset(offset int) IPaymentHistoryDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPaymentHistoryDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentHistoryDo) Unscoped() IPaymentHistoryDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentHistoryDo) Create(values ...*models.PaymentHistory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentHistoryDo) CreateInBatches(values []*models.PaymentHistory, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentHistoryDo) Save(values ...*models.PaymentHistory) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentHistoryDo) First() (*models.PaymentHistory, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaymentHistory), nil
	}
}

func (p paymentHistoryDo) Take() (*models.PaymentHistory, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaymentHistory), nil
	}
}

func (p paymentHistoryDo) Last() (*models.PaymentHistory, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaymentHistory), nil
	}
}

func (p paymentHistoryDo) Find() ([]*models.PaymentHistory, error) {
	result, err := p.DO.Find()
	return result.([]*models.PaymentHistory), err
}

func (p paymentHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.PaymentHistory, err error) {
	buf := make([]*models.PaymentHistory, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentHistoryDo) FindInBatches(result *[]*models.PaymentHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentHistoryDo) Attrs(attrs ...field.AssignExpr) IPaymentHistoryDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentHistoryDo) Assign(attrs ...field.AssignExpr) IPaymentHistoryDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentHistoryDo) Joins(fields ...field.RelationField) IPaymentHistoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentHistoryDo) Preload(fields ...field.RelationField) IPaymentHistoryDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentHistoryDo) FirstOrInit() (*models.PaymentHistory, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaymentHistory), nil
	}
}

func (p paymentHistoryDo) FirstOrCreate() (*models.PaymentHistory, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.PaymentHistory), nil
	}
}

func (p paymentHistoryDo) FindByPage(offset int, limit int) (result []*models.PaymentHistory, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentHistoryDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentHistoryDo) Delete(models ...*models.PaymentHistory) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentHistoryDo) withDO(do gen.Dao) *paymentHistoryDo {
	p.DO = *do.(*gen.DO)
	return p
}
