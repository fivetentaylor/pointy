// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fivetentaylor/pointy/pkg/models"
)

func newOneTimeAccessToken(db *gorm.DB, opts ...gen.DOOption) oneTimeAccessToken {
	_oneTimeAccessToken := oneTimeAccessToken{}

	_oneTimeAccessToken.oneTimeAccessTokenDo.UseDB(db, opts...)
	_oneTimeAccessToken.oneTimeAccessTokenDo.UseModel(&models.OneTimeAccessToken{})

	tableName := _oneTimeAccessToken.oneTimeAccessTokenDo.TableName()
	_oneTimeAccessToken.ALL = field.NewAsterisk(tableName)
	_oneTimeAccessToken.ID = field.NewInt32(tableName, "id")
	_oneTimeAccessToken.UserID = field.NewString(tableName, "user_id")
	_oneTimeAccessToken.Token = field.NewString(tableName, "token")
	_oneTimeAccessToken.ExpiresAt = field.NewTime(tableName, "expires_at")
	_oneTimeAccessToken.IsUsed = field.NewBool(tableName, "is_used")
	_oneTimeAccessToken.CreatedAt = field.NewTime(tableName, "created_at")
	_oneTimeAccessToken.UpdatedAt = field.NewTime(tableName, "updated_at")

	_oneTimeAccessToken.fillFieldMap()

	return _oneTimeAccessToken
}

type oneTimeAccessToken struct {
	oneTimeAccessTokenDo

	ALL       field.Asterisk
	ID        field.Int32
	UserID    field.String
	Token     field.String
	ExpiresAt field.Time
	IsUsed    field.Bool
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (o oneTimeAccessToken) Table(newTableName string) *oneTimeAccessToken {
	o.oneTimeAccessTokenDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o oneTimeAccessToken) As(alias string) *oneTimeAccessToken {
	o.oneTimeAccessTokenDo.DO = *(o.oneTimeAccessTokenDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *oneTimeAccessToken) updateTableName(table string) *oneTimeAccessToken {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt32(table, "id")
	o.UserID = field.NewString(table, "user_id")
	o.Token = field.NewString(table, "token")
	o.ExpiresAt = field.NewTime(table, "expires_at")
	o.IsUsed = field.NewBool(table, "is_used")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *oneTimeAccessToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *oneTimeAccessToken) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["id"] = o.ID
	o.fieldMap["user_id"] = o.UserID
	o.fieldMap["token"] = o.Token
	o.fieldMap["expires_at"] = o.ExpiresAt
	o.fieldMap["is_used"] = o.IsUsed
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o oneTimeAccessToken) clone(db *gorm.DB) oneTimeAccessToken {
	o.oneTimeAccessTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o oneTimeAccessToken) replaceDB(db *gorm.DB) oneTimeAccessToken {
	o.oneTimeAccessTokenDo.ReplaceDB(db)
	return o
}

type oneTimeAccessTokenDo struct{ gen.DO }

type IOneTimeAccessTokenDo interface {
	gen.SubQuery
	Debug() IOneTimeAccessTokenDo
	WithContext(ctx context.Context) IOneTimeAccessTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOneTimeAccessTokenDo
	WriteDB() IOneTimeAccessTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOneTimeAccessTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOneTimeAccessTokenDo
	Not(conds ...gen.Condition) IOneTimeAccessTokenDo
	Or(conds ...gen.Condition) IOneTimeAccessTokenDo
	Select(conds ...field.Expr) IOneTimeAccessTokenDo
	Where(conds ...gen.Condition) IOneTimeAccessTokenDo
	Order(conds ...field.Expr) IOneTimeAccessTokenDo
	Distinct(cols ...field.Expr) IOneTimeAccessTokenDo
	Omit(cols ...field.Expr) IOneTimeAccessTokenDo
	Join(table schema.Tabler, on ...field.Expr) IOneTimeAccessTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOneTimeAccessTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOneTimeAccessTokenDo
	Group(cols ...field.Expr) IOneTimeAccessTokenDo
	Having(conds ...gen.Condition) IOneTimeAccessTokenDo
	Limit(limit int) IOneTimeAccessTokenDo
	Offset(offset int) IOneTimeAccessTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOneTimeAccessTokenDo
	Unscoped() IOneTimeAccessTokenDo
	Create(values ...*models.OneTimeAccessToken) error
	CreateInBatches(values []*models.OneTimeAccessToken, batchSize int) error
	Save(values ...*models.OneTimeAccessToken) error
	First() (*models.OneTimeAccessToken, error)
	Take() (*models.OneTimeAccessToken, error)
	Last() (*models.OneTimeAccessToken, error)
	Find() ([]*models.OneTimeAccessToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OneTimeAccessToken, err error)
	FindInBatches(result *[]*models.OneTimeAccessToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.OneTimeAccessToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOneTimeAccessTokenDo
	Assign(attrs ...field.AssignExpr) IOneTimeAccessTokenDo
	Joins(fields ...field.RelationField) IOneTimeAccessTokenDo
	Preload(fields ...field.RelationField) IOneTimeAccessTokenDo
	FirstOrInit() (*models.OneTimeAccessToken, error)
	FirstOrCreate() (*models.OneTimeAccessToken, error)
	FindByPage(offset int, limit int) (result []*models.OneTimeAccessToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOneTimeAccessTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o oneTimeAccessTokenDo) Debug() IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Debug())
}

func (o oneTimeAccessTokenDo) WithContext(ctx context.Context) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o oneTimeAccessTokenDo) ReadDB() IOneTimeAccessTokenDo {
	return o.Clauses(dbresolver.Read)
}

func (o oneTimeAccessTokenDo) WriteDB() IOneTimeAccessTokenDo {
	return o.Clauses(dbresolver.Write)
}

func (o oneTimeAccessTokenDo) Session(config *gorm.Session) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Session(config))
}

func (o oneTimeAccessTokenDo) Clauses(conds ...clause.Expression) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o oneTimeAccessTokenDo) Returning(value interface{}, columns ...string) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o oneTimeAccessTokenDo) Not(conds ...gen.Condition) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o oneTimeAccessTokenDo) Or(conds ...gen.Condition) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o oneTimeAccessTokenDo) Select(conds ...field.Expr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o oneTimeAccessTokenDo) Where(conds ...gen.Condition) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o oneTimeAccessTokenDo) Order(conds ...field.Expr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o oneTimeAccessTokenDo) Distinct(cols ...field.Expr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o oneTimeAccessTokenDo) Omit(cols ...field.Expr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o oneTimeAccessTokenDo) Join(table schema.Tabler, on ...field.Expr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o oneTimeAccessTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o oneTimeAccessTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o oneTimeAccessTokenDo) Group(cols ...field.Expr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o oneTimeAccessTokenDo) Having(conds ...gen.Condition) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o oneTimeAccessTokenDo) Limit(limit int) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o oneTimeAccessTokenDo) Offset(offset int) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o oneTimeAccessTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o oneTimeAccessTokenDo) Unscoped() IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Unscoped())
}

func (o oneTimeAccessTokenDo) Create(values ...*models.OneTimeAccessToken) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o oneTimeAccessTokenDo) CreateInBatches(values []*models.OneTimeAccessToken, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o oneTimeAccessTokenDo) Save(values ...*models.OneTimeAccessToken) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o oneTimeAccessTokenDo) First() (*models.OneTimeAccessToken, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.OneTimeAccessToken), nil
	}
}

func (o oneTimeAccessTokenDo) Take() (*models.OneTimeAccessToken, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.OneTimeAccessToken), nil
	}
}

func (o oneTimeAccessTokenDo) Last() (*models.OneTimeAccessToken, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.OneTimeAccessToken), nil
	}
}

func (o oneTimeAccessTokenDo) Find() ([]*models.OneTimeAccessToken, error) {
	result, err := o.DO.Find()
	return result.([]*models.OneTimeAccessToken), err
}

func (o oneTimeAccessTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.OneTimeAccessToken, err error) {
	buf := make([]*models.OneTimeAccessToken, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o oneTimeAccessTokenDo) FindInBatches(result *[]*models.OneTimeAccessToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o oneTimeAccessTokenDo) Attrs(attrs ...field.AssignExpr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o oneTimeAccessTokenDo) Assign(attrs ...field.AssignExpr) IOneTimeAccessTokenDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o oneTimeAccessTokenDo) Joins(fields ...field.RelationField) IOneTimeAccessTokenDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o oneTimeAccessTokenDo) Preload(fields ...field.RelationField) IOneTimeAccessTokenDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o oneTimeAccessTokenDo) FirstOrInit() (*models.OneTimeAccessToken, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.OneTimeAccessToken), nil
	}
}

func (o oneTimeAccessTokenDo) FirstOrCreate() (*models.OneTimeAccessToken, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.OneTimeAccessToken), nil
	}
}

func (o oneTimeAccessTokenDo) FindByPage(offset int, limit int) (result []*models.OneTimeAccessToken, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o oneTimeAccessTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o oneTimeAccessTokenDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o oneTimeAccessTokenDo) Delete(models ...*models.OneTimeAccessToken) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *oneTimeAccessTokenDo) withDO(do gen.Dao) *oneTimeAccessTokenDo {
	o.DO = *do.(*gen.DO)
	return o
}
