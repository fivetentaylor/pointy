// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/teamreviso/code/pkg/models"
)

func newSharedDocumentLink(db *gorm.DB, opts ...gen.DOOption) sharedDocumentLink {
	_sharedDocumentLink := sharedDocumentLink{}

	_sharedDocumentLink.sharedDocumentLinkDo.UseDB(db, opts...)
	_sharedDocumentLink.sharedDocumentLinkDo.UseModel(&models.SharedDocumentLink{})

	tableName := _sharedDocumentLink.sharedDocumentLinkDo.TableName()
	_sharedDocumentLink.ALL = field.NewAsterisk(tableName)
	_sharedDocumentLink.ID = field.NewInt32(tableName, "id")
	_sharedDocumentLink.DocumentID = field.NewString(tableName, "document_id")
	_sharedDocumentLink.InviterID = field.NewString(tableName, "inviter_id")
	_sharedDocumentLink.InviteeEmail = field.NewString(tableName, "invitee_email")
	_sharedDocumentLink.InviteLink = field.NewString(tableName, "invite_link")
	_sharedDocumentLink.CreatedAt = field.NewTime(tableName, "created_at")
	_sharedDocumentLink.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sharedDocumentLink.IsActive = field.NewBool(tableName, "is_active")

	_sharedDocumentLink.fillFieldMap()

	return _sharedDocumentLink
}

type sharedDocumentLink struct {
	sharedDocumentLinkDo

	ALL          field.Asterisk
	ID           field.Int32
	DocumentID   field.String
	InviterID    field.String
	InviteeEmail field.String
	InviteLink   field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	IsActive     field.Bool

	fieldMap map[string]field.Expr
}

func (s sharedDocumentLink) Table(newTableName string) *sharedDocumentLink {
	s.sharedDocumentLinkDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sharedDocumentLink) As(alias string) *sharedDocumentLink {
	s.sharedDocumentLinkDo.DO = *(s.sharedDocumentLinkDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sharedDocumentLink) updateTableName(table string) *sharedDocumentLink {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.DocumentID = field.NewString(table, "document_id")
	s.InviterID = field.NewString(table, "inviter_id")
	s.InviteeEmail = field.NewString(table, "invitee_email")
	s.InviteLink = field.NewString(table, "invite_link")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.IsActive = field.NewBool(table, "is_active")

	s.fillFieldMap()

	return s
}

func (s *sharedDocumentLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sharedDocumentLink) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["document_id"] = s.DocumentID
	s.fieldMap["inviter_id"] = s.InviterID
	s.fieldMap["invitee_email"] = s.InviteeEmail
	s.fieldMap["invite_link"] = s.InviteLink
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["is_active"] = s.IsActive
}

func (s sharedDocumentLink) clone(db *gorm.DB) sharedDocumentLink {
	s.sharedDocumentLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sharedDocumentLink) replaceDB(db *gorm.DB) sharedDocumentLink {
	s.sharedDocumentLinkDo.ReplaceDB(db)
	return s
}

type sharedDocumentLinkDo struct{ gen.DO }

type ISharedDocumentLinkDo interface {
	gen.SubQuery
	Debug() ISharedDocumentLinkDo
	WithContext(ctx context.Context) ISharedDocumentLinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISharedDocumentLinkDo
	WriteDB() ISharedDocumentLinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISharedDocumentLinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISharedDocumentLinkDo
	Not(conds ...gen.Condition) ISharedDocumentLinkDo
	Or(conds ...gen.Condition) ISharedDocumentLinkDo
	Select(conds ...field.Expr) ISharedDocumentLinkDo
	Where(conds ...gen.Condition) ISharedDocumentLinkDo
	Order(conds ...field.Expr) ISharedDocumentLinkDo
	Distinct(cols ...field.Expr) ISharedDocumentLinkDo
	Omit(cols ...field.Expr) ISharedDocumentLinkDo
	Join(table schema.Tabler, on ...field.Expr) ISharedDocumentLinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISharedDocumentLinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISharedDocumentLinkDo
	Group(cols ...field.Expr) ISharedDocumentLinkDo
	Having(conds ...gen.Condition) ISharedDocumentLinkDo
	Limit(limit int) ISharedDocumentLinkDo
	Offset(offset int) ISharedDocumentLinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISharedDocumentLinkDo
	Unscoped() ISharedDocumentLinkDo
	Create(values ...*models.SharedDocumentLink) error
	CreateInBatches(values []*models.SharedDocumentLink, batchSize int) error
	Save(values ...*models.SharedDocumentLink) error
	First() (*models.SharedDocumentLink, error)
	Take() (*models.SharedDocumentLink, error)
	Last() (*models.SharedDocumentLink, error)
	Find() ([]*models.SharedDocumentLink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SharedDocumentLink, err error)
	FindInBatches(result *[]*models.SharedDocumentLink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SharedDocumentLink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISharedDocumentLinkDo
	Assign(attrs ...field.AssignExpr) ISharedDocumentLinkDo
	Joins(fields ...field.RelationField) ISharedDocumentLinkDo
	Preload(fields ...field.RelationField) ISharedDocumentLinkDo
	FirstOrInit() (*models.SharedDocumentLink, error)
	FirstOrCreate() (*models.SharedDocumentLink, error)
	FindByPage(offset int, limit int) (result []*models.SharedDocumentLink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISharedDocumentLinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sharedDocumentLinkDo) Debug() ISharedDocumentLinkDo {
	return s.withDO(s.DO.Debug())
}

func (s sharedDocumentLinkDo) WithContext(ctx context.Context) ISharedDocumentLinkDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sharedDocumentLinkDo) ReadDB() ISharedDocumentLinkDo {
	return s.Clauses(dbresolver.Read)
}

func (s sharedDocumentLinkDo) WriteDB() ISharedDocumentLinkDo {
	return s.Clauses(dbresolver.Write)
}

func (s sharedDocumentLinkDo) Session(config *gorm.Session) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Session(config))
}

func (s sharedDocumentLinkDo) Clauses(conds ...clause.Expression) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sharedDocumentLinkDo) Returning(value interface{}, columns ...string) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sharedDocumentLinkDo) Not(conds ...gen.Condition) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sharedDocumentLinkDo) Or(conds ...gen.Condition) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sharedDocumentLinkDo) Select(conds ...field.Expr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sharedDocumentLinkDo) Where(conds ...gen.Condition) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sharedDocumentLinkDo) Order(conds ...field.Expr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sharedDocumentLinkDo) Distinct(cols ...field.Expr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sharedDocumentLinkDo) Omit(cols ...field.Expr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sharedDocumentLinkDo) Join(table schema.Tabler, on ...field.Expr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sharedDocumentLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sharedDocumentLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sharedDocumentLinkDo) Group(cols ...field.Expr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sharedDocumentLinkDo) Having(conds ...gen.Condition) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sharedDocumentLinkDo) Limit(limit int) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sharedDocumentLinkDo) Offset(offset int) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sharedDocumentLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sharedDocumentLinkDo) Unscoped() ISharedDocumentLinkDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sharedDocumentLinkDo) Create(values ...*models.SharedDocumentLink) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sharedDocumentLinkDo) CreateInBatches(values []*models.SharedDocumentLink, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sharedDocumentLinkDo) Save(values ...*models.SharedDocumentLink) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sharedDocumentLinkDo) First() (*models.SharedDocumentLink, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SharedDocumentLink), nil
	}
}

func (s sharedDocumentLinkDo) Take() (*models.SharedDocumentLink, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SharedDocumentLink), nil
	}
}

func (s sharedDocumentLinkDo) Last() (*models.SharedDocumentLink, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SharedDocumentLink), nil
	}
}

func (s sharedDocumentLinkDo) Find() ([]*models.SharedDocumentLink, error) {
	result, err := s.DO.Find()
	return result.([]*models.SharedDocumentLink), err
}

func (s sharedDocumentLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SharedDocumentLink, err error) {
	buf := make([]*models.SharedDocumentLink, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sharedDocumentLinkDo) FindInBatches(result *[]*models.SharedDocumentLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sharedDocumentLinkDo) Attrs(attrs ...field.AssignExpr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sharedDocumentLinkDo) Assign(attrs ...field.AssignExpr) ISharedDocumentLinkDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sharedDocumentLinkDo) Joins(fields ...field.RelationField) ISharedDocumentLinkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sharedDocumentLinkDo) Preload(fields ...field.RelationField) ISharedDocumentLinkDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sharedDocumentLinkDo) FirstOrInit() (*models.SharedDocumentLink, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SharedDocumentLink), nil
	}
}

func (s sharedDocumentLinkDo) FirstOrCreate() (*models.SharedDocumentLink, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SharedDocumentLink), nil
	}
}

func (s sharedDocumentLinkDo) FindByPage(offset int, limit int) (result []*models.SharedDocumentLink, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sharedDocumentLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sharedDocumentLinkDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sharedDocumentLinkDo) Delete(models ...*models.SharedDocumentLink) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sharedDocumentLinkDo) withDO(do gen.Dao) *sharedDocumentLinkDo {
	s.DO = *do.(*gen.DO)
	return s
}
