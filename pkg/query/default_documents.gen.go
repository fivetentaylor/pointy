// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/teamreviso/code/pkg/models"
)

func newDefaultDocument(db *gorm.DB, opts ...gen.DOOption) defaultDocument {
	_defaultDocument := defaultDocument{}

	_defaultDocument.defaultDocumentDo.UseDB(db, opts...)
	_defaultDocument.defaultDocumentDo.UseModel(&models.DefaultDocument{})

	tableName := _defaultDocument.defaultDocumentDo.TableName()
	_defaultDocument.ALL = field.NewAsterisk(tableName)
	_defaultDocument.Name = field.NewString(tableName, "name")
	_defaultDocument.DocID = field.NewString(tableName, "doc_id")

	_defaultDocument.fillFieldMap()

	return _defaultDocument
}

type defaultDocument struct {
	defaultDocumentDo

	ALL   field.Asterisk
	Name  field.String
	DocID field.String

	fieldMap map[string]field.Expr
}

func (d defaultDocument) Table(newTableName string) *defaultDocument {
	d.defaultDocumentDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d defaultDocument) As(alias string) *defaultDocument {
	d.defaultDocumentDo.DO = *(d.defaultDocumentDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *defaultDocument) updateTableName(table string) *defaultDocument {
	d.ALL = field.NewAsterisk(table)
	d.Name = field.NewString(table, "name")
	d.DocID = field.NewString(table, "doc_id")

	d.fillFieldMap()

	return d
}

func (d *defaultDocument) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *defaultDocument) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["name"] = d.Name
	d.fieldMap["doc_id"] = d.DocID
}

func (d defaultDocument) clone(db *gorm.DB) defaultDocument {
	d.defaultDocumentDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d defaultDocument) replaceDB(db *gorm.DB) defaultDocument {
	d.defaultDocumentDo.ReplaceDB(db)
	return d
}

type defaultDocumentDo struct{ gen.DO }

type IDefaultDocumentDo interface {
	gen.SubQuery
	Debug() IDefaultDocumentDo
	WithContext(ctx context.Context) IDefaultDocumentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDefaultDocumentDo
	WriteDB() IDefaultDocumentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDefaultDocumentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDefaultDocumentDo
	Not(conds ...gen.Condition) IDefaultDocumentDo
	Or(conds ...gen.Condition) IDefaultDocumentDo
	Select(conds ...field.Expr) IDefaultDocumentDo
	Where(conds ...gen.Condition) IDefaultDocumentDo
	Order(conds ...field.Expr) IDefaultDocumentDo
	Distinct(cols ...field.Expr) IDefaultDocumentDo
	Omit(cols ...field.Expr) IDefaultDocumentDo
	Join(table schema.Tabler, on ...field.Expr) IDefaultDocumentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDefaultDocumentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDefaultDocumentDo
	Group(cols ...field.Expr) IDefaultDocumentDo
	Having(conds ...gen.Condition) IDefaultDocumentDo
	Limit(limit int) IDefaultDocumentDo
	Offset(offset int) IDefaultDocumentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDefaultDocumentDo
	Unscoped() IDefaultDocumentDo
	Create(values ...*models.DefaultDocument) error
	CreateInBatches(values []*models.DefaultDocument, batchSize int) error
	Save(values ...*models.DefaultDocument) error
	First() (*models.DefaultDocument, error)
	Take() (*models.DefaultDocument, error)
	Last() (*models.DefaultDocument, error)
	Find() ([]*models.DefaultDocument, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DefaultDocument, err error)
	FindInBatches(result *[]*models.DefaultDocument, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DefaultDocument) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDefaultDocumentDo
	Assign(attrs ...field.AssignExpr) IDefaultDocumentDo
	Joins(fields ...field.RelationField) IDefaultDocumentDo
	Preload(fields ...field.RelationField) IDefaultDocumentDo
	FirstOrInit() (*models.DefaultDocument, error)
	FirstOrCreate() (*models.DefaultDocument, error)
	FindByPage(offset int, limit int) (result []*models.DefaultDocument, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDefaultDocumentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d defaultDocumentDo) Debug() IDefaultDocumentDo {
	return d.withDO(d.DO.Debug())
}

func (d defaultDocumentDo) WithContext(ctx context.Context) IDefaultDocumentDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d defaultDocumentDo) ReadDB() IDefaultDocumentDo {
	return d.Clauses(dbresolver.Read)
}

func (d defaultDocumentDo) WriteDB() IDefaultDocumentDo {
	return d.Clauses(dbresolver.Write)
}

func (d defaultDocumentDo) Session(config *gorm.Session) IDefaultDocumentDo {
	return d.withDO(d.DO.Session(config))
}

func (d defaultDocumentDo) Clauses(conds ...clause.Expression) IDefaultDocumentDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d defaultDocumentDo) Returning(value interface{}, columns ...string) IDefaultDocumentDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d defaultDocumentDo) Not(conds ...gen.Condition) IDefaultDocumentDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d defaultDocumentDo) Or(conds ...gen.Condition) IDefaultDocumentDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d defaultDocumentDo) Select(conds ...field.Expr) IDefaultDocumentDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d defaultDocumentDo) Where(conds ...gen.Condition) IDefaultDocumentDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d defaultDocumentDo) Order(conds ...field.Expr) IDefaultDocumentDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d defaultDocumentDo) Distinct(cols ...field.Expr) IDefaultDocumentDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d defaultDocumentDo) Omit(cols ...field.Expr) IDefaultDocumentDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d defaultDocumentDo) Join(table schema.Tabler, on ...field.Expr) IDefaultDocumentDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d defaultDocumentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDefaultDocumentDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d defaultDocumentDo) RightJoin(table schema.Tabler, on ...field.Expr) IDefaultDocumentDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d defaultDocumentDo) Group(cols ...field.Expr) IDefaultDocumentDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d defaultDocumentDo) Having(conds ...gen.Condition) IDefaultDocumentDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d defaultDocumentDo) Limit(limit int) IDefaultDocumentDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d defaultDocumentDo) Offset(offset int) IDefaultDocumentDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d defaultDocumentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDefaultDocumentDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d defaultDocumentDo) Unscoped() IDefaultDocumentDo {
	return d.withDO(d.DO.Unscoped())
}

func (d defaultDocumentDo) Create(values ...*models.DefaultDocument) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d defaultDocumentDo) CreateInBatches(values []*models.DefaultDocument, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d defaultDocumentDo) Save(values ...*models.DefaultDocument) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d defaultDocumentDo) First() (*models.DefaultDocument, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DefaultDocument), nil
	}
}

func (d defaultDocumentDo) Take() (*models.DefaultDocument, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DefaultDocument), nil
	}
}

func (d defaultDocumentDo) Last() (*models.DefaultDocument, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DefaultDocument), nil
	}
}

func (d defaultDocumentDo) Find() ([]*models.DefaultDocument, error) {
	result, err := d.DO.Find()
	return result.([]*models.DefaultDocument), err
}

func (d defaultDocumentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DefaultDocument, err error) {
	buf := make([]*models.DefaultDocument, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d defaultDocumentDo) FindInBatches(result *[]*models.DefaultDocument, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d defaultDocumentDo) Attrs(attrs ...field.AssignExpr) IDefaultDocumentDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d defaultDocumentDo) Assign(attrs ...field.AssignExpr) IDefaultDocumentDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d defaultDocumentDo) Joins(fields ...field.RelationField) IDefaultDocumentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d defaultDocumentDo) Preload(fields ...field.RelationField) IDefaultDocumentDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d defaultDocumentDo) FirstOrInit() (*models.DefaultDocument, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DefaultDocument), nil
	}
}

func (d defaultDocumentDo) FirstOrCreate() (*models.DefaultDocument, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DefaultDocument), nil
	}
}

func (d defaultDocumentDo) FindByPage(offset int, limit int) (result []*models.DefaultDocument, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d defaultDocumentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d defaultDocumentDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d defaultDocumentDo) Delete(models ...*models.DefaultDocument) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *defaultDocumentDo) withDO(do gen.Dao) *defaultDocumentDo {
	d.DO = *do.(*gen.DO)
	return d
}
