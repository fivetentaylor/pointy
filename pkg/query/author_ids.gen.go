// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fivetentaylor/pointy/pkg/models"
)

func newAuthorID(db *gorm.DB, opts ...gen.DOOption) authorID {
	_authorID := authorID{}

	_authorID.authorIDDo.UseDB(db, opts...)
	_authorID.authorIDDo.UseModel(&models.AuthorID{})

	tableName := _authorID.authorIDDo.TableName()
	_authorID.ALL = field.NewAsterisk(tableName)
	_authorID.ID = field.NewInt32(tableName, "id")
	_authorID.AuthorID = field.NewInt32(tableName, "author_id")
	_authorID.DocumentID = field.NewString(tableName, "document_id")
	_authorID.UserID = field.NewString(tableName, "user_id")
	_authorID.CreatedAt = field.NewTime(tableName, "created_at")

	_authorID.fillFieldMap()

	return _authorID
}

type authorID struct {
	authorIDDo

	ALL        field.Asterisk
	ID         field.Int32
	AuthorID   field.Int32
	DocumentID field.String
	UserID     field.String
	CreatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (a authorID) Table(newTableName string) *authorID {
	a.authorIDDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authorID) As(alias string) *authorID {
	a.authorIDDo.DO = *(a.authorIDDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authorID) updateTableName(table string) *authorID {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.AuthorID = field.NewInt32(table, "author_id")
	a.DocumentID = field.NewString(table, "document_id")
	a.UserID = field.NewString(table, "user_id")
	a.CreatedAt = field.NewTime(table, "created_at")

	a.fillFieldMap()

	return a
}

func (a *authorID) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authorID) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["author_id"] = a.AuthorID
	a.fieldMap["document_id"] = a.DocumentID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["created_at"] = a.CreatedAt
}

func (a authorID) clone(db *gorm.DB) authorID {
	a.authorIDDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authorID) replaceDB(db *gorm.DB) authorID {
	a.authorIDDo.ReplaceDB(db)
	return a
}

type authorIDDo struct{ gen.DO }

type IAuthorIDDo interface {
	gen.SubQuery
	Debug() IAuthorIDDo
	WithContext(ctx context.Context) IAuthorIDDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthorIDDo
	WriteDB() IAuthorIDDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthorIDDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthorIDDo
	Not(conds ...gen.Condition) IAuthorIDDo
	Or(conds ...gen.Condition) IAuthorIDDo
	Select(conds ...field.Expr) IAuthorIDDo
	Where(conds ...gen.Condition) IAuthorIDDo
	Order(conds ...field.Expr) IAuthorIDDo
	Distinct(cols ...field.Expr) IAuthorIDDo
	Omit(cols ...field.Expr) IAuthorIDDo
	Join(table schema.Tabler, on ...field.Expr) IAuthorIDDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthorIDDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthorIDDo
	Group(cols ...field.Expr) IAuthorIDDo
	Having(conds ...gen.Condition) IAuthorIDDo
	Limit(limit int) IAuthorIDDo
	Offset(offset int) IAuthorIDDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthorIDDo
	Unscoped() IAuthorIDDo
	Create(values ...*models.AuthorID) error
	CreateInBatches(values []*models.AuthorID, batchSize int) error
	Save(values ...*models.AuthorID) error
	First() (*models.AuthorID, error)
	Take() (*models.AuthorID, error)
	Last() (*models.AuthorID, error)
	Find() ([]*models.AuthorID, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AuthorID, err error)
	FindInBatches(result *[]*models.AuthorID, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.AuthorID) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthorIDDo
	Assign(attrs ...field.AssignExpr) IAuthorIDDo
	Joins(fields ...field.RelationField) IAuthorIDDo
	Preload(fields ...field.RelationField) IAuthorIDDo
	FirstOrInit() (*models.AuthorID, error)
	FirstOrCreate() (*models.AuthorID, error)
	FindByPage(offset int, limit int) (result []*models.AuthorID, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthorIDDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authorIDDo) Debug() IAuthorIDDo {
	return a.withDO(a.DO.Debug())
}

func (a authorIDDo) WithContext(ctx context.Context) IAuthorIDDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authorIDDo) ReadDB() IAuthorIDDo {
	return a.Clauses(dbresolver.Read)
}

func (a authorIDDo) WriteDB() IAuthorIDDo {
	return a.Clauses(dbresolver.Write)
}

func (a authorIDDo) Session(config *gorm.Session) IAuthorIDDo {
	return a.withDO(a.DO.Session(config))
}

func (a authorIDDo) Clauses(conds ...clause.Expression) IAuthorIDDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authorIDDo) Returning(value interface{}, columns ...string) IAuthorIDDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authorIDDo) Not(conds ...gen.Condition) IAuthorIDDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authorIDDo) Or(conds ...gen.Condition) IAuthorIDDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authorIDDo) Select(conds ...field.Expr) IAuthorIDDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authorIDDo) Where(conds ...gen.Condition) IAuthorIDDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authorIDDo) Order(conds ...field.Expr) IAuthorIDDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authorIDDo) Distinct(cols ...field.Expr) IAuthorIDDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authorIDDo) Omit(cols ...field.Expr) IAuthorIDDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authorIDDo) Join(table schema.Tabler, on ...field.Expr) IAuthorIDDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authorIDDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthorIDDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authorIDDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthorIDDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authorIDDo) Group(cols ...field.Expr) IAuthorIDDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authorIDDo) Having(conds ...gen.Condition) IAuthorIDDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authorIDDo) Limit(limit int) IAuthorIDDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authorIDDo) Offset(offset int) IAuthorIDDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authorIDDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthorIDDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authorIDDo) Unscoped() IAuthorIDDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authorIDDo) Create(values ...*models.AuthorID) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authorIDDo) CreateInBatches(values []*models.AuthorID, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authorIDDo) Save(values ...*models.AuthorID) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authorIDDo) First() (*models.AuthorID, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthorID), nil
	}
}

func (a authorIDDo) Take() (*models.AuthorID, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthorID), nil
	}
}

func (a authorIDDo) Last() (*models.AuthorID, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthorID), nil
	}
}

func (a authorIDDo) Find() ([]*models.AuthorID, error) {
	result, err := a.DO.Find()
	return result.([]*models.AuthorID), err
}

func (a authorIDDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.AuthorID, err error) {
	buf := make([]*models.AuthorID, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authorIDDo) FindInBatches(result *[]*models.AuthorID, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authorIDDo) Attrs(attrs ...field.AssignExpr) IAuthorIDDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authorIDDo) Assign(attrs ...field.AssignExpr) IAuthorIDDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authorIDDo) Joins(fields ...field.RelationField) IAuthorIDDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authorIDDo) Preload(fields ...field.RelationField) IAuthorIDDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authorIDDo) FirstOrInit() (*models.AuthorID, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthorID), nil
	}
}

func (a authorIDDo) FirstOrCreate() (*models.AuthorID, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.AuthorID), nil
	}
}

func (a authorIDDo) FindByPage(offset int, limit int) (result []*models.AuthorID, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authorIDDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authorIDDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authorIDDo) Delete(models ...*models.AuthorID) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authorIDDo) withDO(do gen.Dao) *authorIDDo {
	a.DO = *do.(*gen.DO)
	return a
}
