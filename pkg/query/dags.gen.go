// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fivetentaylor/pointy/pkg/models"
)

func newDag(db *gorm.DB, opts ...gen.DOOption) dag {
	_dag := dag{}

	_dag.dagDo.UseDB(db, opts...)
	_dag.dagDo.UseModel(&models.Dag{})

	tableName := _dag.dagDo.TableName()
	_dag.ALL = field.NewAsterisk(tableName)
	_dag.ID = field.NewString(tableName, "id")
	_dag.Name = field.NewString(tableName, "name")
	_dag.CreatedAt = field.NewTime(tableName, "created_at")
	_dag.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dag.fillFieldMap()

	return _dag
}

type dag struct {
	dagDo

	ALL       field.Asterisk
	ID        field.String
	Name      field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d dag) Table(newTableName string) *dag {
	d.dagDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dag) As(alias string) *dag {
	d.dagDo.DO = *(d.dagDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dag) updateTableName(table string) *dag {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.Name = field.NewString(table, "name")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dag) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 4)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dag) clone(db *gorm.DB) dag {
	d.dagDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dag) replaceDB(db *gorm.DB) dag {
	d.dagDo.ReplaceDB(db)
	return d
}

type dagDo struct{ gen.DO }

type IDagDo interface {
	gen.SubQuery
	Debug() IDagDo
	WithContext(ctx context.Context) IDagDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDagDo
	WriteDB() IDagDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDagDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDagDo
	Not(conds ...gen.Condition) IDagDo
	Or(conds ...gen.Condition) IDagDo
	Select(conds ...field.Expr) IDagDo
	Where(conds ...gen.Condition) IDagDo
	Order(conds ...field.Expr) IDagDo
	Distinct(cols ...field.Expr) IDagDo
	Omit(cols ...field.Expr) IDagDo
	Join(table schema.Tabler, on ...field.Expr) IDagDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDagDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDagDo
	Group(cols ...field.Expr) IDagDo
	Having(conds ...gen.Condition) IDagDo
	Limit(limit int) IDagDo
	Offset(offset int) IDagDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDagDo
	Unscoped() IDagDo
	Create(values ...*models.Dag) error
	CreateInBatches(values []*models.Dag, batchSize int) error
	Save(values ...*models.Dag) error
	First() (*models.Dag, error)
	Take() (*models.Dag, error)
	Last() (*models.Dag, error)
	Find() ([]*models.Dag, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Dag, err error)
	FindInBatches(result *[]*models.Dag, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Dag) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDagDo
	Assign(attrs ...field.AssignExpr) IDagDo
	Joins(fields ...field.RelationField) IDagDo
	Preload(fields ...field.RelationField) IDagDo
	FirstOrInit() (*models.Dag, error)
	FirstOrCreate() (*models.Dag, error)
	FindByPage(offset int, limit int) (result []*models.Dag, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDagDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dagDo) Debug() IDagDo {
	return d.withDO(d.DO.Debug())
}

func (d dagDo) WithContext(ctx context.Context) IDagDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dagDo) ReadDB() IDagDo {
	return d.Clauses(dbresolver.Read)
}

func (d dagDo) WriteDB() IDagDo {
	return d.Clauses(dbresolver.Write)
}

func (d dagDo) Session(config *gorm.Session) IDagDo {
	return d.withDO(d.DO.Session(config))
}

func (d dagDo) Clauses(conds ...clause.Expression) IDagDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dagDo) Returning(value interface{}, columns ...string) IDagDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dagDo) Not(conds ...gen.Condition) IDagDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dagDo) Or(conds ...gen.Condition) IDagDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dagDo) Select(conds ...field.Expr) IDagDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dagDo) Where(conds ...gen.Condition) IDagDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dagDo) Order(conds ...field.Expr) IDagDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dagDo) Distinct(cols ...field.Expr) IDagDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dagDo) Omit(cols ...field.Expr) IDagDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dagDo) Join(table schema.Tabler, on ...field.Expr) IDagDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dagDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDagDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dagDo) RightJoin(table schema.Tabler, on ...field.Expr) IDagDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dagDo) Group(cols ...field.Expr) IDagDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dagDo) Having(conds ...gen.Condition) IDagDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dagDo) Limit(limit int) IDagDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dagDo) Offset(offset int) IDagDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDagDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dagDo) Unscoped() IDagDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dagDo) Create(values ...*models.Dag) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dagDo) CreateInBatches(values []*models.Dag, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dagDo) Save(values ...*models.Dag) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dagDo) First() (*models.Dag, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dag), nil
	}
}

func (d dagDo) Take() (*models.Dag, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dag), nil
	}
}

func (d dagDo) Last() (*models.Dag, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dag), nil
	}
}

func (d dagDo) Find() ([]*models.Dag, error) {
	result, err := d.DO.Find()
	return result.([]*models.Dag), err
}

func (d dagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Dag, err error) {
	buf := make([]*models.Dag, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dagDo) FindInBatches(result *[]*models.Dag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dagDo) Attrs(attrs ...field.AssignExpr) IDagDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dagDo) Assign(attrs ...field.AssignExpr) IDagDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dagDo) Joins(fields ...field.RelationField) IDagDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dagDo) Preload(fields ...field.RelationField) IDagDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dagDo) FirstOrInit() (*models.Dag, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dag), nil
	}
}

func (d dagDo) FirstOrCreate() (*models.Dag, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Dag), nil
	}
}

func (d dagDo) FindByPage(offset int, limit int) (result []*models.Dag, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dagDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dagDo) Delete(models ...*models.Dag) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dagDo) withDO(do gen.Dao) *dagDo {
	d.DO = *do.(*gen.DO)
	return d
}
