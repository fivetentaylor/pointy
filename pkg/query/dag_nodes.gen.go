// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fivetentaylor/pointy/pkg/models"
)

func newDagNode(db *gorm.DB, opts ...gen.DOOption) dagNode {
	_dagNode := dagNode{}

	_dagNode.dagNodeDo.UseDB(db, opts...)
	_dagNode.dagNodeDo.UseModel(&models.DagNode{})

	tableName := _dagNode.dagNodeDo.TableName()
	_dagNode.ALL = field.NewAsterisk(tableName)
	_dagNode.ID = field.NewString(tableName, "id")
	_dagNode.DagID = field.NewString(tableName, "dag_id")
	_dagNode.Name = field.NewString(tableName, "name")
	_dagNode.Type = field.NewString(tableName, "type")
	_dagNode.Metadata = field.NewString(tableName, "metadata")
	_dagNode.CreatedAt = field.NewTime(tableName, "created_at")
	_dagNode.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dagNode.fillFieldMap()

	return _dagNode
}

type dagNode struct {
	dagNodeDo

	ALL       field.Asterisk
	ID        field.String
	DagID     field.String
	Name      field.String
	Type      field.String
	Metadata  field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (d dagNode) Table(newTableName string) *dagNode {
	d.dagNodeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dagNode) As(alias string) *dagNode {
	d.dagNodeDo.DO = *(d.dagNodeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dagNode) updateTableName(table string) *dagNode {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.DagID = field.NewString(table, "dag_id")
	d.Name = field.NewString(table, "name")
	d.Type = field.NewString(table, "type")
	d.Metadata = field.NewString(table, "metadata")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dagNode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dagNode) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["dag_id"] = d.DagID
	d.fieldMap["name"] = d.Name
	d.fieldMap["type"] = d.Type
	d.fieldMap["metadata"] = d.Metadata
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dagNode) clone(db *gorm.DB) dagNode {
	d.dagNodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dagNode) replaceDB(db *gorm.DB) dagNode {
	d.dagNodeDo.ReplaceDB(db)
	return d
}

type dagNodeDo struct{ gen.DO }

type IDagNodeDo interface {
	gen.SubQuery
	Debug() IDagNodeDo
	WithContext(ctx context.Context) IDagNodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDagNodeDo
	WriteDB() IDagNodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDagNodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDagNodeDo
	Not(conds ...gen.Condition) IDagNodeDo
	Or(conds ...gen.Condition) IDagNodeDo
	Select(conds ...field.Expr) IDagNodeDo
	Where(conds ...gen.Condition) IDagNodeDo
	Order(conds ...field.Expr) IDagNodeDo
	Distinct(cols ...field.Expr) IDagNodeDo
	Omit(cols ...field.Expr) IDagNodeDo
	Join(table schema.Tabler, on ...field.Expr) IDagNodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDagNodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDagNodeDo
	Group(cols ...field.Expr) IDagNodeDo
	Having(conds ...gen.Condition) IDagNodeDo
	Limit(limit int) IDagNodeDo
	Offset(offset int) IDagNodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDagNodeDo
	Unscoped() IDagNodeDo
	Create(values ...*models.DagNode) error
	CreateInBatches(values []*models.DagNode, batchSize int) error
	Save(values ...*models.DagNode) error
	First() (*models.DagNode, error)
	Take() (*models.DagNode, error)
	Last() (*models.DagNode, error)
	Find() ([]*models.DagNode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DagNode, err error)
	FindInBatches(result *[]*models.DagNode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DagNode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDagNodeDo
	Assign(attrs ...field.AssignExpr) IDagNodeDo
	Joins(fields ...field.RelationField) IDagNodeDo
	Preload(fields ...field.RelationField) IDagNodeDo
	FirstOrInit() (*models.DagNode, error)
	FirstOrCreate() (*models.DagNode, error)
	FindByPage(offset int, limit int) (result []*models.DagNode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDagNodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dagNodeDo) Debug() IDagNodeDo {
	return d.withDO(d.DO.Debug())
}

func (d dagNodeDo) WithContext(ctx context.Context) IDagNodeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dagNodeDo) ReadDB() IDagNodeDo {
	return d.Clauses(dbresolver.Read)
}

func (d dagNodeDo) WriteDB() IDagNodeDo {
	return d.Clauses(dbresolver.Write)
}

func (d dagNodeDo) Session(config *gorm.Session) IDagNodeDo {
	return d.withDO(d.DO.Session(config))
}

func (d dagNodeDo) Clauses(conds ...clause.Expression) IDagNodeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dagNodeDo) Returning(value interface{}, columns ...string) IDagNodeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dagNodeDo) Not(conds ...gen.Condition) IDagNodeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dagNodeDo) Or(conds ...gen.Condition) IDagNodeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dagNodeDo) Select(conds ...field.Expr) IDagNodeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dagNodeDo) Where(conds ...gen.Condition) IDagNodeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dagNodeDo) Order(conds ...field.Expr) IDagNodeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dagNodeDo) Distinct(cols ...field.Expr) IDagNodeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dagNodeDo) Omit(cols ...field.Expr) IDagNodeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dagNodeDo) Join(table schema.Tabler, on ...field.Expr) IDagNodeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dagNodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDagNodeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dagNodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IDagNodeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dagNodeDo) Group(cols ...field.Expr) IDagNodeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dagNodeDo) Having(conds ...gen.Condition) IDagNodeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dagNodeDo) Limit(limit int) IDagNodeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dagNodeDo) Offset(offset int) IDagNodeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dagNodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDagNodeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dagNodeDo) Unscoped() IDagNodeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dagNodeDo) Create(values ...*models.DagNode) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dagNodeDo) CreateInBatches(values []*models.DagNode, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dagNodeDo) Save(values ...*models.DagNode) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dagNodeDo) First() (*models.DagNode, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagNode), nil
	}
}

func (d dagNodeDo) Take() (*models.DagNode, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagNode), nil
	}
}

func (d dagNodeDo) Last() (*models.DagNode, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagNode), nil
	}
}

func (d dagNodeDo) Find() ([]*models.DagNode, error) {
	result, err := d.DO.Find()
	return result.([]*models.DagNode), err
}

func (d dagNodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DagNode, err error) {
	buf := make([]*models.DagNode, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dagNodeDo) FindInBatches(result *[]*models.DagNode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dagNodeDo) Attrs(attrs ...field.AssignExpr) IDagNodeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dagNodeDo) Assign(attrs ...field.AssignExpr) IDagNodeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dagNodeDo) Joins(fields ...field.RelationField) IDagNodeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dagNodeDo) Preload(fields ...field.RelationField) IDagNodeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dagNodeDo) FirstOrInit() (*models.DagNode, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagNode), nil
	}
}

func (d dagNodeDo) FirstOrCreate() (*models.DagNode, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagNode), nil
	}
}

func (d dagNodeDo) FindByPage(offset int, limit int) (result []*models.DagNode, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dagNodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dagNodeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dagNodeDo) Delete(models ...*models.DagNode) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dagNodeDo) withDO(do gen.Dao) *dagNodeDo {
	d.DO = *do.(*gen.DO)
	return d
}
