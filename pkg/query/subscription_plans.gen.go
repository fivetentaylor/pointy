// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fivetentaylor/pointy/pkg/models"
)

func newSubscriptionPlan(db *gorm.DB, opts ...gen.DOOption) subscriptionPlan {
	_subscriptionPlan := subscriptionPlan{}

	_subscriptionPlan.subscriptionPlanDo.UseDB(db, opts...)
	_subscriptionPlan.subscriptionPlanDo.UseModel(&models.SubscriptionPlan{})

	tableName := _subscriptionPlan.subscriptionPlanDo.TableName()
	_subscriptionPlan.ALL = field.NewAsterisk(tableName)
	_subscriptionPlan.ID = field.NewString(tableName, "id")
	_subscriptionPlan.Name = field.NewString(tableName, "name")
	_subscriptionPlan.PriceCents = field.NewInt32(tableName, "price_cents")
	_subscriptionPlan.Currency = field.NewString(tableName, "currency")
	_subscriptionPlan.Interval = field.NewString(tableName, "interval")
	_subscriptionPlan.Status = field.NewString(tableName, "status")
	_subscriptionPlan.StripePriceID = field.NewString(tableName, "stripe_price_id")
	_subscriptionPlan.CreatedAt = field.NewTime(tableName, "created_at")
	_subscriptionPlan.UpdatedAt = field.NewTime(tableName, "updated_at")

	_subscriptionPlan.fillFieldMap()

	return _subscriptionPlan
}

type subscriptionPlan struct {
	subscriptionPlanDo

	ALL           field.Asterisk
	ID            field.String
	Name          field.String
	PriceCents    field.Int32
	Currency      field.String
	Interval      field.String
	Status        field.String
	StripePriceID field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (s subscriptionPlan) Table(newTableName string) *subscriptionPlan {
	s.subscriptionPlanDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s subscriptionPlan) As(alias string) *subscriptionPlan {
	s.subscriptionPlanDo.DO = *(s.subscriptionPlanDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *subscriptionPlan) updateTableName(table string) *subscriptionPlan {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewString(table, "id")
	s.Name = field.NewString(table, "name")
	s.PriceCents = field.NewInt32(table, "price_cents")
	s.Currency = field.NewString(table, "currency")
	s.Interval = field.NewString(table, "interval")
	s.Status = field.NewString(table, "status")
	s.StripePriceID = field.NewString(table, "stripe_price_id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *subscriptionPlan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *subscriptionPlan) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["price_cents"] = s.PriceCents
	s.fieldMap["currency"] = s.Currency
	s.fieldMap["interval"] = s.Interval
	s.fieldMap["status"] = s.Status
	s.fieldMap["stripe_price_id"] = s.StripePriceID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s subscriptionPlan) clone(db *gorm.DB) subscriptionPlan {
	s.subscriptionPlanDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s subscriptionPlan) replaceDB(db *gorm.DB) subscriptionPlan {
	s.subscriptionPlanDo.ReplaceDB(db)
	return s
}

type subscriptionPlanDo struct{ gen.DO }

type ISubscriptionPlanDo interface {
	gen.SubQuery
	Debug() ISubscriptionPlanDo
	WithContext(ctx context.Context) ISubscriptionPlanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISubscriptionPlanDo
	WriteDB() ISubscriptionPlanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISubscriptionPlanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISubscriptionPlanDo
	Not(conds ...gen.Condition) ISubscriptionPlanDo
	Or(conds ...gen.Condition) ISubscriptionPlanDo
	Select(conds ...field.Expr) ISubscriptionPlanDo
	Where(conds ...gen.Condition) ISubscriptionPlanDo
	Order(conds ...field.Expr) ISubscriptionPlanDo
	Distinct(cols ...field.Expr) ISubscriptionPlanDo
	Omit(cols ...field.Expr) ISubscriptionPlanDo
	Join(table schema.Tabler, on ...field.Expr) ISubscriptionPlanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriptionPlanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISubscriptionPlanDo
	Group(cols ...field.Expr) ISubscriptionPlanDo
	Having(conds ...gen.Condition) ISubscriptionPlanDo
	Limit(limit int) ISubscriptionPlanDo
	Offset(offset int) ISubscriptionPlanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriptionPlanDo
	Unscoped() ISubscriptionPlanDo
	Create(values ...*models.SubscriptionPlan) error
	CreateInBatches(values []*models.SubscriptionPlan, batchSize int) error
	Save(values ...*models.SubscriptionPlan) error
	First() (*models.SubscriptionPlan, error)
	Take() (*models.SubscriptionPlan, error)
	Last() (*models.SubscriptionPlan, error)
	Find() ([]*models.SubscriptionPlan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubscriptionPlan, err error)
	FindInBatches(result *[]*models.SubscriptionPlan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.SubscriptionPlan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISubscriptionPlanDo
	Assign(attrs ...field.AssignExpr) ISubscriptionPlanDo
	Joins(fields ...field.RelationField) ISubscriptionPlanDo
	Preload(fields ...field.RelationField) ISubscriptionPlanDo
	FirstOrInit() (*models.SubscriptionPlan, error)
	FirstOrCreate() (*models.SubscriptionPlan, error)
	FindByPage(offset int, limit int) (result []*models.SubscriptionPlan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISubscriptionPlanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s subscriptionPlanDo) Debug() ISubscriptionPlanDo {
	return s.withDO(s.DO.Debug())
}

func (s subscriptionPlanDo) WithContext(ctx context.Context) ISubscriptionPlanDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s subscriptionPlanDo) ReadDB() ISubscriptionPlanDo {
	return s.Clauses(dbresolver.Read)
}

func (s subscriptionPlanDo) WriteDB() ISubscriptionPlanDo {
	return s.Clauses(dbresolver.Write)
}

func (s subscriptionPlanDo) Session(config *gorm.Session) ISubscriptionPlanDo {
	return s.withDO(s.DO.Session(config))
}

func (s subscriptionPlanDo) Clauses(conds ...clause.Expression) ISubscriptionPlanDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s subscriptionPlanDo) Returning(value interface{}, columns ...string) ISubscriptionPlanDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s subscriptionPlanDo) Not(conds ...gen.Condition) ISubscriptionPlanDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s subscriptionPlanDo) Or(conds ...gen.Condition) ISubscriptionPlanDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s subscriptionPlanDo) Select(conds ...field.Expr) ISubscriptionPlanDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s subscriptionPlanDo) Where(conds ...gen.Condition) ISubscriptionPlanDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s subscriptionPlanDo) Order(conds ...field.Expr) ISubscriptionPlanDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s subscriptionPlanDo) Distinct(cols ...field.Expr) ISubscriptionPlanDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s subscriptionPlanDo) Omit(cols ...field.Expr) ISubscriptionPlanDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s subscriptionPlanDo) Join(table schema.Tabler, on ...field.Expr) ISubscriptionPlanDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s subscriptionPlanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISubscriptionPlanDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s subscriptionPlanDo) RightJoin(table schema.Tabler, on ...field.Expr) ISubscriptionPlanDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s subscriptionPlanDo) Group(cols ...field.Expr) ISubscriptionPlanDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s subscriptionPlanDo) Having(conds ...gen.Condition) ISubscriptionPlanDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s subscriptionPlanDo) Limit(limit int) ISubscriptionPlanDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s subscriptionPlanDo) Offset(offset int) ISubscriptionPlanDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s subscriptionPlanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISubscriptionPlanDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s subscriptionPlanDo) Unscoped() ISubscriptionPlanDo {
	return s.withDO(s.DO.Unscoped())
}

func (s subscriptionPlanDo) Create(values ...*models.SubscriptionPlan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s subscriptionPlanDo) CreateInBatches(values []*models.SubscriptionPlan, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s subscriptionPlanDo) Save(values ...*models.SubscriptionPlan) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s subscriptionPlanDo) First() (*models.SubscriptionPlan, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionPlan), nil
	}
}

func (s subscriptionPlanDo) Take() (*models.SubscriptionPlan, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionPlan), nil
	}
}

func (s subscriptionPlanDo) Last() (*models.SubscriptionPlan, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionPlan), nil
	}
}

func (s subscriptionPlanDo) Find() ([]*models.SubscriptionPlan, error) {
	result, err := s.DO.Find()
	return result.([]*models.SubscriptionPlan), err
}

func (s subscriptionPlanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.SubscriptionPlan, err error) {
	buf := make([]*models.SubscriptionPlan, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s subscriptionPlanDo) FindInBatches(result *[]*models.SubscriptionPlan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s subscriptionPlanDo) Attrs(attrs ...field.AssignExpr) ISubscriptionPlanDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s subscriptionPlanDo) Assign(attrs ...field.AssignExpr) ISubscriptionPlanDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s subscriptionPlanDo) Joins(fields ...field.RelationField) ISubscriptionPlanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s subscriptionPlanDo) Preload(fields ...field.RelationField) ISubscriptionPlanDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s subscriptionPlanDo) FirstOrInit() (*models.SubscriptionPlan, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionPlan), nil
	}
}

func (s subscriptionPlanDo) FirstOrCreate() (*models.SubscriptionPlan, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.SubscriptionPlan), nil
	}
}

func (s subscriptionPlanDo) FindByPage(offset int, limit int) (result []*models.SubscriptionPlan, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s subscriptionPlanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s subscriptionPlanDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s subscriptionPlanDo) Delete(models ...*models.SubscriptionPlan) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *subscriptionPlanDo) withDO(do gen.Dao) *subscriptionPlanDo {
	s.DO = *do.(*gen.DO)
	return s
}
