// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fivetentaylor/pointy/pkg/models"
)

func newDocumentAccess(db *gorm.DB, opts ...gen.DOOption) documentAccess {
	_documentAccess := documentAccess{}

	_documentAccess.documentAccessDo.UseDB(db, opts...)
	_documentAccess.documentAccessDo.UseModel(&models.DocumentAccess{})

	tableName := _documentAccess.documentAccessDo.TableName()
	_documentAccess.ALL = field.NewAsterisk(tableName)
	_documentAccess.ID = field.NewInt32(tableName, "id")
	_documentAccess.DocumentID = field.NewString(tableName, "document_id")
	_documentAccess.UserID = field.NewString(tableName, "user_id")
	_documentAccess.AccessLevel = field.NewString(tableName, "access_level")
	_documentAccess.LastAccessedAt = field.NewTime(tableName, "last_accessed_at")

	_documentAccess.fillFieldMap()

	return _documentAccess
}

type documentAccess struct {
	documentAccessDo

	ALL            field.Asterisk
	ID             field.Int32
	DocumentID     field.String
	UserID         field.String
	AccessLevel    field.String
	LastAccessedAt field.Time

	fieldMap map[string]field.Expr
}

func (d documentAccess) Table(newTableName string) *documentAccess {
	d.documentAccessDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d documentAccess) As(alias string) *documentAccess {
	d.documentAccessDo.DO = *(d.documentAccessDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *documentAccess) updateTableName(table string) *documentAccess {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt32(table, "id")
	d.DocumentID = field.NewString(table, "document_id")
	d.UserID = field.NewString(table, "user_id")
	d.AccessLevel = field.NewString(table, "access_level")
	d.LastAccessedAt = field.NewTime(table, "last_accessed_at")

	d.fillFieldMap()

	return d
}

func (d *documentAccess) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *documentAccess) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["document_id"] = d.DocumentID
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["access_level"] = d.AccessLevel
	d.fieldMap["last_accessed_at"] = d.LastAccessedAt
}

func (d documentAccess) clone(db *gorm.DB) documentAccess {
	d.documentAccessDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d documentAccess) replaceDB(db *gorm.DB) documentAccess {
	d.documentAccessDo.ReplaceDB(db)
	return d
}

type documentAccessDo struct{ gen.DO }

type IDocumentAccessDo interface {
	gen.SubQuery
	Debug() IDocumentAccessDo
	WithContext(ctx context.Context) IDocumentAccessDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDocumentAccessDo
	WriteDB() IDocumentAccessDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDocumentAccessDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDocumentAccessDo
	Not(conds ...gen.Condition) IDocumentAccessDo
	Or(conds ...gen.Condition) IDocumentAccessDo
	Select(conds ...field.Expr) IDocumentAccessDo
	Where(conds ...gen.Condition) IDocumentAccessDo
	Order(conds ...field.Expr) IDocumentAccessDo
	Distinct(cols ...field.Expr) IDocumentAccessDo
	Omit(cols ...field.Expr) IDocumentAccessDo
	Join(table schema.Tabler, on ...field.Expr) IDocumentAccessDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentAccessDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDocumentAccessDo
	Group(cols ...field.Expr) IDocumentAccessDo
	Having(conds ...gen.Condition) IDocumentAccessDo
	Limit(limit int) IDocumentAccessDo
	Offset(offset int) IDocumentAccessDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentAccessDo
	Unscoped() IDocumentAccessDo
	Create(values ...*models.DocumentAccess) error
	CreateInBatches(values []*models.DocumentAccess, batchSize int) error
	Save(values ...*models.DocumentAccess) error
	First() (*models.DocumentAccess, error)
	Take() (*models.DocumentAccess, error)
	Last() (*models.DocumentAccess, error)
	Find() ([]*models.DocumentAccess, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DocumentAccess, err error)
	FindInBatches(result *[]*models.DocumentAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DocumentAccess) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDocumentAccessDo
	Assign(attrs ...field.AssignExpr) IDocumentAccessDo
	Joins(fields ...field.RelationField) IDocumentAccessDo
	Preload(fields ...field.RelationField) IDocumentAccessDo
	FirstOrInit() (*models.DocumentAccess, error)
	FirstOrCreate() (*models.DocumentAccess, error)
	FindByPage(offset int, limit int) (result []*models.DocumentAccess, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDocumentAccessDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d documentAccessDo) Debug() IDocumentAccessDo {
	return d.withDO(d.DO.Debug())
}

func (d documentAccessDo) WithContext(ctx context.Context) IDocumentAccessDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d documentAccessDo) ReadDB() IDocumentAccessDo {
	return d.Clauses(dbresolver.Read)
}

func (d documentAccessDo) WriteDB() IDocumentAccessDo {
	return d.Clauses(dbresolver.Write)
}

func (d documentAccessDo) Session(config *gorm.Session) IDocumentAccessDo {
	return d.withDO(d.DO.Session(config))
}

func (d documentAccessDo) Clauses(conds ...clause.Expression) IDocumentAccessDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d documentAccessDo) Returning(value interface{}, columns ...string) IDocumentAccessDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d documentAccessDo) Not(conds ...gen.Condition) IDocumentAccessDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d documentAccessDo) Or(conds ...gen.Condition) IDocumentAccessDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d documentAccessDo) Select(conds ...field.Expr) IDocumentAccessDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d documentAccessDo) Where(conds ...gen.Condition) IDocumentAccessDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d documentAccessDo) Order(conds ...field.Expr) IDocumentAccessDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d documentAccessDo) Distinct(cols ...field.Expr) IDocumentAccessDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d documentAccessDo) Omit(cols ...field.Expr) IDocumentAccessDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d documentAccessDo) Join(table schema.Tabler, on ...field.Expr) IDocumentAccessDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d documentAccessDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDocumentAccessDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d documentAccessDo) RightJoin(table schema.Tabler, on ...field.Expr) IDocumentAccessDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d documentAccessDo) Group(cols ...field.Expr) IDocumentAccessDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d documentAccessDo) Having(conds ...gen.Condition) IDocumentAccessDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d documentAccessDo) Limit(limit int) IDocumentAccessDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d documentAccessDo) Offset(offset int) IDocumentAccessDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d documentAccessDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDocumentAccessDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d documentAccessDo) Unscoped() IDocumentAccessDo {
	return d.withDO(d.DO.Unscoped())
}

func (d documentAccessDo) Create(values ...*models.DocumentAccess) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d documentAccessDo) CreateInBatches(values []*models.DocumentAccess, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d documentAccessDo) Save(values ...*models.DocumentAccess) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d documentAccessDo) First() (*models.DocumentAccess, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DocumentAccess), nil
	}
}

func (d documentAccessDo) Take() (*models.DocumentAccess, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DocumentAccess), nil
	}
}

func (d documentAccessDo) Last() (*models.DocumentAccess, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DocumentAccess), nil
	}
}

func (d documentAccessDo) Find() ([]*models.DocumentAccess, error) {
	result, err := d.DO.Find()
	return result.([]*models.DocumentAccess), err
}

func (d documentAccessDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DocumentAccess, err error) {
	buf := make([]*models.DocumentAccess, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d documentAccessDo) FindInBatches(result *[]*models.DocumentAccess, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d documentAccessDo) Attrs(attrs ...field.AssignExpr) IDocumentAccessDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d documentAccessDo) Assign(attrs ...field.AssignExpr) IDocumentAccessDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d documentAccessDo) Joins(fields ...field.RelationField) IDocumentAccessDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d documentAccessDo) Preload(fields ...field.RelationField) IDocumentAccessDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d documentAccessDo) FirstOrInit() (*models.DocumentAccess, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DocumentAccess), nil
	}
}

func (d documentAccessDo) FirstOrCreate() (*models.DocumentAccess, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DocumentAccess), nil
	}
}

func (d documentAccessDo) FindByPage(offset int, limit int) (result []*models.DocumentAccess, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d documentAccessDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d documentAccessDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d documentAccessDo) Delete(models ...*models.DocumentAccess) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *documentAccessDo) withDO(do gen.Dao) *documentAccessDo {
	d.DO = *do.(*gen.DO)
	return d
}
