// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fivetentaylor/pointy/pkg/models"
)

func newDagEdge(db *gorm.DB, opts ...gen.DOOption) dagEdge {
	_dagEdge := dagEdge{}

	_dagEdge.dagEdgeDo.UseDB(db, opts...)
	_dagEdge.dagEdgeDo.UseModel(&models.DagEdge{})

	tableName := _dagEdge.dagEdgeDo.TableName()
	_dagEdge.ALL = field.NewAsterisk(tableName)
	_dagEdge.ID = field.NewString(tableName, "id")
	_dagEdge.SourceNodeID = field.NewString(tableName, "source_node_id")
	_dagEdge.TargetNodeID = field.NewString(tableName, "target_node_id")
	_dagEdge.DagID = field.NewString(tableName, "dag_id")
	_dagEdge.CreatedAt = field.NewTime(tableName, "created_at")
	_dagEdge.UpdatedAt = field.NewTime(tableName, "updated_at")

	_dagEdge.fillFieldMap()

	return _dagEdge
}

type dagEdge struct {
	dagEdgeDo

	ALL          field.Asterisk
	ID           field.String
	SourceNodeID field.String
	TargetNodeID field.String
	DagID        field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (d dagEdge) Table(newTableName string) *dagEdge {
	d.dagEdgeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dagEdge) As(alias string) *dagEdge {
	d.dagEdgeDo.DO = *(d.dagEdgeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dagEdge) updateTableName(table string) *dagEdge {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewString(table, "id")
	d.SourceNodeID = field.NewString(table, "source_node_id")
	d.TargetNodeID = field.NewString(table, "target_node_id")
	d.DagID = field.NewString(table, "dag_id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")

	d.fillFieldMap()

	return d
}

func (d *dagEdge) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dagEdge) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["source_node_id"] = d.SourceNodeID
	d.fieldMap["target_node_id"] = d.TargetNodeID
	d.fieldMap["dag_id"] = d.DagID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
}

func (d dagEdge) clone(db *gorm.DB) dagEdge {
	d.dagEdgeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dagEdge) replaceDB(db *gorm.DB) dagEdge {
	d.dagEdgeDo.ReplaceDB(db)
	return d
}

type dagEdgeDo struct{ gen.DO }

type IDagEdgeDo interface {
	gen.SubQuery
	Debug() IDagEdgeDo
	WithContext(ctx context.Context) IDagEdgeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDagEdgeDo
	WriteDB() IDagEdgeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDagEdgeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDagEdgeDo
	Not(conds ...gen.Condition) IDagEdgeDo
	Or(conds ...gen.Condition) IDagEdgeDo
	Select(conds ...field.Expr) IDagEdgeDo
	Where(conds ...gen.Condition) IDagEdgeDo
	Order(conds ...field.Expr) IDagEdgeDo
	Distinct(cols ...field.Expr) IDagEdgeDo
	Omit(cols ...field.Expr) IDagEdgeDo
	Join(table schema.Tabler, on ...field.Expr) IDagEdgeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDagEdgeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDagEdgeDo
	Group(cols ...field.Expr) IDagEdgeDo
	Having(conds ...gen.Condition) IDagEdgeDo
	Limit(limit int) IDagEdgeDo
	Offset(offset int) IDagEdgeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDagEdgeDo
	Unscoped() IDagEdgeDo
	Create(values ...*models.DagEdge) error
	CreateInBatches(values []*models.DagEdge, batchSize int) error
	Save(values ...*models.DagEdge) error
	First() (*models.DagEdge, error)
	Take() (*models.DagEdge, error)
	Last() (*models.DagEdge, error)
	Find() ([]*models.DagEdge, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DagEdge, err error)
	FindInBatches(result *[]*models.DagEdge, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DagEdge) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDagEdgeDo
	Assign(attrs ...field.AssignExpr) IDagEdgeDo
	Joins(fields ...field.RelationField) IDagEdgeDo
	Preload(fields ...field.RelationField) IDagEdgeDo
	FirstOrInit() (*models.DagEdge, error)
	FirstOrCreate() (*models.DagEdge, error)
	FindByPage(offset int, limit int) (result []*models.DagEdge, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDagEdgeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dagEdgeDo) Debug() IDagEdgeDo {
	return d.withDO(d.DO.Debug())
}

func (d dagEdgeDo) WithContext(ctx context.Context) IDagEdgeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dagEdgeDo) ReadDB() IDagEdgeDo {
	return d.Clauses(dbresolver.Read)
}

func (d dagEdgeDo) WriteDB() IDagEdgeDo {
	return d.Clauses(dbresolver.Write)
}

func (d dagEdgeDo) Session(config *gorm.Session) IDagEdgeDo {
	return d.withDO(d.DO.Session(config))
}

func (d dagEdgeDo) Clauses(conds ...clause.Expression) IDagEdgeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dagEdgeDo) Returning(value interface{}, columns ...string) IDagEdgeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dagEdgeDo) Not(conds ...gen.Condition) IDagEdgeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dagEdgeDo) Or(conds ...gen.Condition) IDagEdgeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dagEdgeDo) Select(conds ...field.Expr) IDagEdgeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dagEdgeDo) Where(conds ...gen.Condition) IDagEdgeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dagEdgeDo) Order(conds ...field.Expr) IDagEdgeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dagEdgeDo) Distinct(cols ...field.Expr) IDagEdgeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dagEdgeDo) Omit(cols ...field.Expr) IDagEdgeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dagEdgeDo) Join(table schema.Tabler, on ...field.Expr) IDagEdgeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dagEdgeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDagEdgeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dagEdgeDo) RightJoin(table schema.Tabler, on ...field.Expr) IDagEdgeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dagEdgeDo) Group(cols ...field.Expr) IDagEdgeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dagEdgeDo) Having(conds ...gen.Condition) IDagEdgeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dagEdgeDo) Limit(limit int) IDagEdgeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dagEdgeDo) Offset(offset int) IDagEdgeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dagEdgeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDagEdgeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dagEdgeDo) Unscoped() IDagEdgeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dagEdgeDo) Create(values ...*models.DagEdge) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dagEdgeDo) CreateInBatches(values []*models.DagEdge, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dagEdgeDo) Save(values ...*models.DagEdge) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dagEdgeDo) First() (*models.DagEdge, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagEdge), nil
	}
}

func (d dagEdgeDo) Take() (*models.DagEdge, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagEdge), nil
	}
}

func (d dagEdgeDo) Last() (*models.DagEdge, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagEdge), nil
	}
}

func (d dagEdgeDo) Find() ([]*models.DagEdge, error) {
	result, err := d.DO.Find()
	return result.([]*models.DagEdge), err
}

func (d dagEdgeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DagEdge, err error) {
	buf := make([]*models.DagEdge, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dagEdgeDo) FindInBatches(result *[]*models.DagEdge, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dagEdgeDo) Attrs(attrs ...field.AssignExpr) IDagEdgeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dagEdgeDo) Assign(attrs ...field.AssignExpr) IDagEdgeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dagEdgeDo) Joins(fields ...field.RelationField) IDagEdgeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dagEdgeDo) Preload(fields ...field.RelationField) IDagEdgeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dagEdgeDo) FirstOrInit() (*models.DagEdge, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagEdge), nil
	}
}

func (d dagEdgeDo) FirstOrCreate() (*models.DagEdge, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DagEdge), nil
	}
}

func (d dagEdgeDo) FindByPage(offset int, limit int) (result []*models.DagEdge, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dagEdgeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dagEdgeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dagEdgeDo) Delete(models ...*models.DagEdge) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dagEdgeDo) withDO(do gen.Dao) *dagEdgeDo {
	d.DO = *do.(*gen.DO)
	return d
}
