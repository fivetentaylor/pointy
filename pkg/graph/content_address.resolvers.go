package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/fivetentaylor/pointy/pkg/env"
	"github.com/fivetentaylor/pointy/pkg/graph/model"
	"github.com/fivetentaylor/pointy/pkg/rogue"
	"github.com/fivetentaylor/pointy/rogue/v3"
)

// CreateContentAddress is the resolver for the createContentAddress field.
func (r *mutationResolver) SaveContentAddress(ctx context.Context, documentID string, payload string) (*model.MutationResponse, error) {
	ca := v3.ContentAddress{}
	addressBytes := []byte(payload)

	err := json.Unmarshal(addressBytes, &ca)
	if err != nil {
		return nil, err
	}

	dydb := env.Dynamo(ctx)
	s3 := env.S3(ctx)
	redis := env.Redis(ctx)
	query := env.Query(ctx)
	ds := rogue.NewDocStore(s3, query, redis)

	_, doc, err := ds.GetCurrentDoc(ctx, documentID)
	if err != nil {
		return nil, err
	}

	if !doc.ValidAddress(ca) {
		return nil, fmt.Errorf("invalid address")
	}

	addressID, err := dydb.CreateContentAddress(documentID, addressBytes)
	if err != nil {
		return nil, err
	}

	return &model.MutationResponse{
		ID: addressID,
	}, nil
}

// GetContentAddress is the resolver for the getContentAddress field.
func (r *queryResolver) GetContentAddress(ctx context.Context, documentID string, addressID string) (*model.ContentAddress, error) {
	dydb := env.Dynamo(ctx)
	addressBytes, err := dydb.GetContentAddress(documentID, addressID)
	if err != nil {
		return nil, err
	}

	return &model.ContentAddress{
		ID:         addressID,
		DocumentID: documentID,
		Payload:    string(addressBytes),
	}, nil
}
