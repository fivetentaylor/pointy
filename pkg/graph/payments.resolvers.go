package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"

	"github.com/fivetentaylor/pointy/pkg/env"
	"github.com/fivetentaylor/pointy/pkg/graph/model"
	"github.com/fivetentaylor/pointy/pkg/models"
	"github.com/fivetentaylor/pointy/pkg/service/payments"
)

// CheckoutSubscriptionPlan is the resolver for the checkoutSubscriptionPlan field.
func (r *mutationResolver) CheckoutSubscriptionPlan(ctx context.Context, id string) (*model.Checkout, error) {
	log := env.SLog(ctx)
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		log.Error("error getting current user", "error", err)
		return nil, fmt.Errorf("please login")
	}

	url, err := payments.Checkout(ctx, currentUser.Id, id)
	if err != nil {
		log.Error("error creating checkout session", "error", err)
		return nil, err
	}

	return &model.Checkout{URL: url}, nil
}

// BillingPortalSession is the resolver for the billingPortalSession field.
func (r *mutationResolver) BillingPortalSession(ctx context.Context) (*model.BillingPortalSession, error) {
	log := env.SLog(ctx)
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		log.Error("error getting current user", "error", err)
		return nil, fmt.Errorf("please login")
	}

	url, err := payments.BillingPortalSession(ctx, currentUser.Id)
	if err != nil {
		log.Error("error creating billing portal session", "error", err)
		return nil, err
	}

	return &model.BillingPortalSession{URL: url}, nil
}

// SubscriptionPlans is the resolver for the subscriptionPlans field.
func (r *queryResolver) SubscriptionPlans(ctx context.Context) ([]*models.SubscriptionPlan, error) {
	log := env.SLog(ctx)

	subPlansTbl := env.Query(ctx).SubscriptionPlan
	subPlans, err := subPlansTbl.
		Where(subPlansTbl.Status.Eq("active")).
		Order(subPlansTbl.PriceCents).
		Find()
	if err != nil {
		log.Error("error getting subscription plans", "error", err)
		return nil, err
	}

	return subPlans, nil
}
