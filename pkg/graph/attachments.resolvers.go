package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/teamreviso/code/pkg/env"
	"github.com/teamreviso/code/pkg/graph/model"
	"github.com/teamreviso/code/pkg/models"
	"github.com/teamreviso/code/pkg/service/attachments"
)

// UploadAttachment is the resolver for the uploadAttachment field.
func (r *mutationResolver) UploadAttachment(ctx context.Context, file graphql.Upload, docID string) (*models.DocumentAttachment, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		return nil, err
	}

	record, err := attachments.Upload(ctx, file, docID, currentUser.Id)
	if err != nil {
		return nil, err
	}

	return record, nil
}

// GetAttachmentSignedURL is the resolver for the getAttachmentSignedUrl field.
func (r *queryResolver) GetAttachmentSignedURL(ctx context.Context, attachmentID string) (*model.SignedImageURL, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		return nil, err
	}

	signedURL, err := attachments.GetSignedURL(ctx, attachmentID, currentUser.Id, "original")
	if err != nil {
		return nil, err
	}

	return signedURL, nil
}

// ListDocumentAttachments is the resolver for the listDocumentAttachments field.
func (r *queryResolver) ListDocumentAttachments(ctx context.Context, docID string) ([]*models.DocumentAttachment, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		return nil, err
	}

	attachments, err := attachments.ListForDocumentAndUser(ctx, docID, currentUser.Id)
	if err != nil {
		return nil, err
	}

	return attachments, nil
}

// ListUsersAttachments is the resolver for the listUsersAttachments field.
func (r *queryResolver) ListUsersAttachments(ctx context.Context) ([]*models.DocumentAttachment, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		return nil, err
	}

	attachments, err := attachments.ListForUser(ctx, currentUser.Id)
	if err != nil {
		return nil, err
	}

	return attachments, nil
}
