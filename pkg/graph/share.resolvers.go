package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"
	"html"

	"github.com/99designs/gqlgen/graphql"
	"github.com/charmbracelet/log"
	"github.com/fivetentaylor/pointy/pkg/env"
	"github.com/fivetentaylor/pointy/pkg/graph/model"
	"github.com/fivetentaylor/pointy/pkg/models"
	"github.com/fivetentaylor/pointy/pkg/server/auth"
	"github.com/fivetentaylor/pointy/pkg/service/sharing"
	"github.com/fivetentaylor/pointy/pkg/stackerr"
	"github.com/fivetentaylor/pointy/pkg/utils"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// ShareDocument is the resolver for shareDocument field.
func (r *mutationResolver) ShareDocument(ctx context.Context, documentID string, emails []string, message *string) ([]*models.SharedDocumentLink, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		log.Errorf("error getting current user: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("please login")
	}

	documentTbl := env.Query(ctx).Document
	docAccessTbl := env.Query(ctx).DocumentAccess

	doc, err := documentTbl.
		LeftJoin(docAccessTbl, documentTbl.ID.EqCol(docAccessTbl.DocumentID)).
		Where(docAccessTbl.UserID.Eq(currentUser.Id)).
		Where(docAccessTbl.AccessLevel.In("owner", "write")).
		Where(documentTbl.ID.Eq(documentID)).
		First()
	if err != nil {
		log.Errorf("error getting document: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not load your document")
	}

	userTbl := env.Query(ctx).User
	invitedBy, err := userTbl.
		Where(userTbl.ID.Eq(currentUser.Id)).
		First()
	if err != nil {
		log.Errorf("error getting user: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not share your document")
	}

	customMessage := ""
	if message != nil {
		customMessage = *message
	}

	sharedLinks, err := sharing.ShareDoc(ctx, doc, invitedBy, emails, customMessage)
	if err != nil {
		log.Errorf("error sharing document: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not share your document")
	}

	return sharedLinks, nil // Return the slice of shared links after the loop completes
}

// UnshareDocument is the resolver for the unshareDocument field.
func (r *mutationResolver) UnshareDocument(ctx context.Context, documentID string, editorID string) (*models.Document, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		log.Errorf("error getting current user: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("please login")
	}

	documentTbl := env.Query(ctx).Document
	docAccessTbl := env.Query(ctx).DocumentAccess

	doc, err := documentTbl.
		LeftJoin(docAccessTbl, documentTbl.ID.EqCol(docAccessTbl.DocumentID)).
		Where(docAccessTbl.UserID.Eq(currentUser.Id)).
		Where(docAccessTbl.AccessLevel.In("owner", "write")).
		Where(documentTbl.ID.Eq(documentID)).
		First()
	if err != nil {
		log.Errorf("error getting document: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not load your document")
	}

	err = sharing.UnshareDoc(ctx, currentUser.Id, doc, editorID)
	if err != nil {
		log.Errorf("error unsharing document: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not unshare your document")
	}

	return doc, nil
}

// CreateShareLinks is the resolver for the createShareLinks field.
func (r *mutationResolver) CreateShareLinks(ctx context.Context, documentID string, emails []string, message *string) ([]*models.SharedDocumentLink, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		log.Errorf("error getting current user: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("please login")
	}

	documentTbl := env.Query(ctx).Document
	docAccessTbl := env.Query(ctx).DocumentAccess

	doc, err := documentTbl.
		LeftJoin(docAccessTbl, documentTbl.ID.EqCol(docAccessTbl.DocumentID)).
		Where(docAccessTbl.UserID.Eq(currentUser.Id)).
		Where(docAccessTbl.AccessLevel.In("owner", "write")).
		Where(documentTbl.ID.Eq(documentID)).
		First()
	if err != nil {
		log.Errorf("error getting document: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not load your document")
	}

	userTbl := env.Query(ctx).User
	invitedBy, err := userTbl.
		Where(userTbl.ID.Eq(currentUser.Id)).
		First()
	if err != nil {
		log.Errorf("error getting user: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not share your document")
	}

	var sharedLinks []*models.SharedDocumentLink // Initialize a slice to store shared links

	customMessage := ""
	if message != nil {
		customMessage = html.EscapeString(*message)
	}

	invalidEmails := []string{}
	for _, email := range emails {
		if !utils.IsValidEmail(email) {
			invalidEmails = append(invalidEmails, email)
		}
	}

	if len(invalidEmails) > 0 {
		return nil, fmt.Errorf("invalid email(s): %v", invalidEmails)
	}

	for _, email := range emails {
		cleanedEmail := utils.NormalizeEmail(email)
		sharedLink, err := sharing.CreateShareLink(ctx, doc, invitedBy, cleanedEmail, customMessage)

		if err != nil {
			log.Errorf("error creating share link for %s: %s", cleanedEmail, stackerr.Wrap(err))
			// Decide how to handle the error; for now, let's continue with the next email
			continue // or return nil, fmt.Errorf("sorry, we could not share your document with %s", email)
		}

		sharedLinks = append(sharedLinks, sharedLink) // Append the shared link to the slice
	}

	if len(sharedLinks) == 0 {
		return nil, fmt.Errorf("no shared links were created, please check the log for errors")
	}

	return sharedLinks, nil // Return the slice of shared links after the loop completes
}

// UpdateShareLink is the resolver for the updateShareLink field.
func (r *mutationResolver) UpdateShareLink(ctx context.Context, inviteLink string, isActive bool) (*models.SharedDocumentLink, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		log.Errorf("error getting current user: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("please login")
	}

	shareLinkTbl := env.Query(ctx).SharedDocumentLink
	docAccessTbl := env.Query(ctx).DocumentAccess

	sl, err := shareLinkTbl.
		LeftJoin(docAccessTbl, shareLinkTbl.DocumentID.EqCol(docAccessTbl.DocumentID)).
		Where(shareLinkTbl.InviteLink.Eq(inviteLink)).
		Where(docAccessTbl.UserID.Eq(currentUser.Id)).
		Where(docAccessTbl.AccessLevel.In("owner", "write")).
		First()
	if err != nil {
		log.Errorf("error getting share link access: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not load your share link")
	}

	sl, err = sharing.UpdateLink(ctx, currentUser.Id, sl, isActive)
	if err != nil {
		log.Errorf("error updating share link: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not update your share link")
	}

	return sl, nil
}

// JoinShareLink is the resolver for the joinShareLink field.
func (r *mutationResolver) JoinShareLink(ctx context.Context, inviteLink string) (*models.Document, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		log.Errorf("error getting current user: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("please login")
	}

	shareLinkTbl := env.Query(ctx).SharedDocumentLink
	sl, err := shareLinkTbl.
		Where(shareLinkTbl.InviteLink.Eq(inviteLink)).
		Where(shareLinkTbl.InviteeEmail.Eq(currentUser.Email)).
		First()

	if err != nil {
		log.Errorf("error getting share link: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not load your share link")
	}

	doc, err := sharing.JoinDoc(ctx, sl.DocumentID, currentUser.Id, "write")
	if err != nil {
		log.Errorf("error joining share link: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not join your share link")
	}

	return doc, nil
}

// SendAccessLinkForInvite is the resolver for the sendAccessLinkForInvite field.
func (r *mutationResolver) SendAccessLinkForInvite(ctx context.Context, inviteLink string) (*bool, error) {
	shareLinkTbl := env.Query(ctx).SharedDocumentLink
	success := false

	sl, err := shareLinkTbl.
		Where(shareLinkTbl.InviteLink.Eq(inviteLink)).
		First()
	if err != nil {
		log.Errorf("error getting share link: %s", stackerr.Wrap(err))
		return &success, fmt.Errorf("sorry, we could not load your share link")
	}

	err = auth.SendAccessLink(
		ctx,
		sl.InviteeEmail,
		fmt.Sprintf("/invite/%s", inviteLink),
	)
	if err != nil {
		log.Errorf("error sending access link: %s", stackerr.Wrap(err))
		return &success, fmt.Errorf("sorry, we could not send your access link")
	}

	success = true
	return &success, nil
}

// SharedLink is the resolver for the sharedLink field.
func (r *queryResolver) SharedLink(ctx context.Context, inviteLink string) (*models.SharedDocumentLink, error) {
	shareLinkTbl := env.Query(ctx).SharedDocumentLink

	sl, err := shareLinkTbl.
		Where(shareLinkTbl.InviteLink.Eq(inviteLink)).
		First()

	if err != nil {
		log.Errorf("error getting share link: %s", stackerr.Wrap(err))

		return nil, &gqlerror.Error{
			Path:    graphql.GetPath(ctx),
			Message: "Sorry, we could not load your share link",
			Extensions: map[string]interface{}{
				"code": "ACCESS_MISMATCH",
			},
		}
	}

	return sl, nil
}

// SharedLinks is the resolver for the sharedLinks field.
func (r *queryResolver) SharedLinks(ctx context.Context, documentID string) ([]*models.SharedDocumentLink, error) {
	currentUser, err := env.UserClaim(ctx)
	if err != nil {
		log.Errorf("error getting current user: %s", stackerr.Wrap(err))
	}

	docTbl := env.Query(ctx).Document
	docAccessTbl := env.Query(ctx).DocumentAccess

	// Check the user has access to the document
	// TODO: move this reused query somewhere
	_, err = docTbl.
		LeftJoin(docAccessTbl, docTbl.ID.EqCol(docAccessTbl.DocumentID)).
		Where(docAccessTbl.UserID.Eq(currentUser.Id)).
		Where(docAccessTbl.AccessLevel.In("owner", "write")).
		Where(docTbl.ID.Eq(documentID)).
		First()
	if err != nil {
		log.Errorf("error getting document: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not the shared links for this document")
	}

	shareLinkTbl := env.Query(ctx).SharedDocumentLink

	sl, err := shareLinkTbl.
		Where(shareLinkTbl.DocumentID.Eq(documentID)).
		Order(shareLinkTbl.CreatedAt.Desc()).
		Find()
	if err != nil {
		log.Errorf("error getting share link: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not the shared links for this document")
	}

	return sl, nil
}

// UnauthenticatedSharedLink is the resolver for the unauthenticatedSharedLink field.
func (r *queryResolver) UnauthenticatedSharedLink(ctx context.Context, inviteLink string) (*model.UnauthenticatedSharedLink, error) {
	shareLinkTbl := env.Query(ctx).SharedDocumentLink

	sl, err := shareLinkTbl.
		Where(shareLinkTbl.InviteLink.Eq(inviteLink)).
		Where(shareLinkTbl.IsActive.Is(true)).
		First()

	if err != nil {
		log.Errorf("error getting share link: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not load your share link")
	}

	docTbl := env.Query(ctx).Document
	doc, err := docTbl.
		Where(docTbl.ID.Eq(sl.DocumentID)).
		First()
	if err != nil {
		log.Errorf("error getting document: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not load your shared link")
	}

	userTbl := env.Query(ctx).User

	user, err := userTbl.
		Where(userTbl.ID.Eq(sl.InviterID)).
		First()
	if err != nil {
		log.Errorf("error getting user: %s", stackerr.Wrap(err))
		return nil, fmt.Errorf("sorry, we could not load your shared link")
	}

	return &model.UnauthenticatedSharedLink{
		InviteLink:     sl.InviteLink,
		DocumentTitle:  doc.Title,
		InvitedByEmail: user.Email,
		InvitedByName:  user.Name,
	}, nil
}

// InvitedBy is the resolver for the inviteeEmail field.
func (r *sharedDocumentLinkResolver) InviteeUser(ctx context.Context, obj *models.SharedDocumentLink) (*models.User, error) {
	userTbl := env.Query(ctx).User

	return userTbl.
		Where(userTbl.Email.Eq(obj.InviteeEmail)).
		First()
}

// Document is the resolver for the document field.
func (r *sharedDocumentLinkResolver) Document(ctx context.Context, obj *models.SharedDocumentLink) (*models.Document, error) {
	docTbl := env.Query(ctx).Document

	return docTbl.
		Where(docTbl.ID.Eq(obj.DocumentID)).
		First()
}

// InvitedBy is the resolver for the invitedBy field.
func (r *sharedDocumentLinkResolver) InvitedBy(ctx context.Context, obj *models.SharedDocumentLink) (*models.User, error) {
	userTbl := env.Query(ctx).User

	return userTbl.
		Where(userTbl.ID.Eq(obj.InviterID)).
		First()
}

// SharedDocumentLink returns SharedDocumentLinkResolver implementation.
func (r *Resolver) SharedDocumentLink() SharedDocumentLinkResolver {
	return &sharedDocumentLinkResolver{r}
}

type sharedDocumentLinkResolver struct{ *Resolver }
