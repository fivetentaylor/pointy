package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/charmbracelet/log"
	"github.com/teamreviso/code/pkg/graph/model"
	"github.com/teamreviso/code/pkg/service/images"
)

// UploadImage is the resolver for the uploadImage field.
func (r *mutationResolver) UploadImage(ctx context.Context, file graphql.Upload, docID string) (*model.Image, error) {
	if err := checkIfOwner(ctx, docID); err != nil {
		return nil, err
	}

	image, err := images.UploadImage(ctx, file, docID)
	if err != nil {
		log.Errorf("error uploading image: %s", err)
		return nil, fmt.Errorf("internal error")
	}

	return image, nil
}

// GetImageSignedURL is the resolver for the getImageSignedUrl field.
func (r *queryResolver) GetImageSignedURL(ctx context.Context, docID string, imageID string) (*model.SignedImageURL, error) {
	if err := checkIfOwner(ctx, docID); err != nil {
		return nil, err
	}

	signedURL, err := images.GetImageSignedURL(ctx, docID, imageID)
	if err != nil {
		log.Errorf("error getting signed url: %s", err)
		return nil, fmt.Errorf("internal error")
	}

	return signedURL, nil
}

// ListDocumentImages is the resolver for the listDocumentImages field.
func (r *queryResolver) ListDocumentImages(ctx context.Context, docID string) ([]*model.Image, error) {
	if err := checkIfOwner(ctx, docID); err != nil {
		return nil, err
	}

	images, err := images.ListDocumentImages(ctx, docID)
	if err != nil {
		log.Errorf("error listing document images: %s", err)
		return nil, fmt.Errorf("internal error")
	}

	return images, nil
}

// GetImage is the resolver for the getImage field.
func (r *queryResolver) GetImage(ctx context.Context, docID string, imageID string) (*model.Image, error) {
	if err := checkIfOwner(ctx, docID); err != nil {
		return nil, err
	}

	image, err := images.GetImage(ctx, docID, imageID)
	if err != nil {
		log.Errorf("error getting image: %s", err)
		return nil, fmt.Errorf("internal error")
	}

	return image, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
